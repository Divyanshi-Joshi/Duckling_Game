{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport hitBlockSound from '../assets/hit-block.mp3';\nimport correctSound from '../assets/correct-answer.mp3';\nimport wrongSound from '../assets/wrong-answer.mp3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isJumpingUp, setIsJumpingUp] = useState(false); // New state\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n\n  // Initialize audio elements\n  const hitBlockAudio = useRef(new Audio(hitBlockSound));\n  const correctAudio = useRef(new Audio(correctSound));\n  const wrongAudio = useRef(new Audio(wrongSound));\n\n  // Helper function to generate blocks ensuring no two question blocks or red blocks in a row\n  const generateBlock = lastBlockType => {\n    if (lastBlockType === 'question') {\n      return {\n        type: 'blue',\n        x: 0,\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      const rand = Math.random();\n      if (rand < 0.2) {\n        // 20% chance for a question block\n        return {\n          type: 'question',\n          x: 0,\n          width: blockWidth,\n          height: 50\n        };\n      } else if (rand < 0.3) {\n        // 10% chance for a red block\n        return {\n          type: 'red',\n          x: 0,\n          width: blockWidth,\n          height: 50\n        };\n      } else {\n        return {\n          type: 'blue',\n          x: 0,\n          width: blockWidth,\n          height: 50\n        };\n      }\n    }\n  };\n\n  // 1. Initial Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two question or red blocks in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // 2. Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // 3. Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generateBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling is jumping and hits a question block\n            const isHittingQuestionBlock = isJumpingUp && duckLeft + ducklingWidth > blockLeft + threshold && duckLeft < blockRight - threshold && block.type === 'question' && !answeredBlocks.has(i);\n            if (isHittingQuestionBlock) {\n              triggerMCQ(i);\n              return prevLeft; // Prevent moving into the question block\n            }\n\n            // Existing red block collision\n            const isOnRedBlock = duckLeft >= blockLeft + threshold && duckRight <= blockRight - threshold && block.type === 'red' && !answeredBlocks.has(i);\n            if (isOnRedBlock) {\n              triggerMCQ(i);\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, isJumpingUp]);\n  const jump = () => {\n    if (!isJumping && !isJumpingUp) {\n      // Prevent double jump\n      setIsJumping(true);\n      setIsJumpingUp(true);\n      setTimeout(() => {\n        setIsJumping(false);\n        setIsJumpingUp(false);\n      }, jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    hitBlockAudio.current.play(); // Play hit block sound\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n\n  // 4. Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two question or red blocks in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generateBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // 5. Handle Answer Function\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      correctAudio.current.play(); // Play correct answer sound\n      setCoins(prevCoins => prevCoins + 5); // Adjust coin value as desired\n      setScore(prevScore => prevScore + 10);\n    } else {\n      wrongAudio.current.play(); // Play wrong answer sound\n      // Deduct a life\n      setLives(prevLives => {\n        const newLives = prevLives - 1;\n        if (newLives <= 0) {\n          alert('Game Over!');\n          resetGame(); // Reset the game entirely\n          return 3; // Reset lives to initial value after game over\n        }\n        return newLives;\n      });\n\n      // Reset the duckling's position to the beginning\n      setLeftPosition(50);\n      setCameraX(0);\n\n      // Optionally, reset answered blocks to allow revisiting questions\n      setAnsweredBlocks(new Set());\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: `duckling ${isJumping ? 'jumping' : ''}`,\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"IfpthRYWcIi+OMtq9MFXZ9wqlWA=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","hitBlockSound","correctSound","wrongSound","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isJumpingUp","setIsJumpingUp","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","hitBlockAudio","Audio","correctAudio","wrongAudio","generateBlock","lastBlockType","type","x","width","height","rand","Math","random","blocks","setBlocks","initialBlocks","i","push","newBlock","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prevLeft","potentialNewPos","gameWidth","current","clientWidth","lastBlock","length","prevBlocks","_prevBlocks","duckLeft","duckRight","block","blockLeft","blockRight","isHittingQuestionBlock","has","triggerMCQ","isOnRedBlock","maxLeft","min","clearInterval","setTimeout","blockIndex","play","floor","prev","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport hitBlockSound from '../assets/hit-block.mp3';\r\nimport correctSound from '../assets/correct-answer.mp3';\r\nimport wrongSound from '../assets/wrong-answer.mp3';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isJumpingUp, setIsJumpingUp] = useState(false); // New state\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n\r\n  // Initialize audio elements\r\n  const hitBlockAudio = useRef(new Audio(hitBlockSound));\r\n  const correctAudio = useRef(new Audio(correctSound));\r\n  const wrongAudio = useRef(new Audio(wrongSound));\r\n\r\n  // Helper function to generate blocks ensuring no two question blocks or red blocks in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'question') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0,\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      const rand = Math.random();\r\n      if (rand < 0.2) { // 20% chance for a question block\r\n        return {\r\n          type: 'question',\r\n          x: 0,\r\n          width: blockWidth,\r\n          height: 50,\r\n        };\r\n      } else if (rand < 0.3) { // 10% chance for a red block\r\n        return {\r\n          type: 'red',\r\n          x: 0,\r\n          width: blockWidth,\r\n          height: 50,\r\n        };\r\n      } else {\r\n        return {\r\n          type: 'blue',\r\n          x: 0,\r\n          width: blockWidth,\r\n          height: 50,\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  // 1. Initial Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two question or red blocks in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // 2. Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // 3. Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generateBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling is jumping and hits a question block\r\n            const isHittingQuestionBlock =\r\n              isJumpingUp &&\r\n              duckLeft + ducklingWidth > blockLeft + threshold &&\r\n              duckLeft < blockRight - threshold &&\r\n              block.type === 'question' &&\r\n              !answeredBlocks.has(i);\r\n\r\n            if (isHittingQuestionBlock) {\r\n              triggerMCQ(i);\r\n              return prevLeft; // Prevent moving into the question block\r\n            }\r\n\r\n            // Existing red block collision\r\n            const isOnRedBlock =\r\n              duckLeft >= blockLeft + threshold &&\r\n              duckRight <= blockRight - threshold &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i);\r\n\r\n            if (isOnRedBlock) {\r\n              triggerMCQ(i);\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, isJumpingUp]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping && !isJumpingUp) { // Prevent double jump\r\n      setIsJumping(true);\r\n      setIsJumpingUp(true);\r\n      setTimeout(() => {\r\n        setIsJumping(false);\r\n        setIsJumpingUp(false);\r\n      }, jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    hitBlockAudio.current.play(); // Play hit block sound\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  // 4. Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two question or red blocks in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generateBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // 5. Handle Answer Function\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      correctAudio.current.play(); // Play correct answer sound\r\n      setCoins((prevCoins) => prevCoins + 5); // Adjust coin value as desired\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      wrongAudio.current.play(); // Play wrong answer sound\r\n      // Deduct a life\r\n      setLives((prevLives) => {\r\n        const newLives = prevLives - 1;\r\n        if (newLives <= 0) {\r\n          alert('Game Over!');\r\n          resetGame(); // Reset the game entirely\r\n          return 3; // Reset lives to initial value after game over\r\n        }\r\n        return newLives;\r\n      });\r\n\r\n      // Reset the duckling's position to the beginning\r\n      setLeftPosition(50);\r\n      setCameraX(0);\r\n\r\n      // Optionally, reset answered blocks to allow revisiting questions\r\n      setAnsweredBlocks(new Set());\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={`duckling ${isJumping ? 'jumping' : ''}`}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`,\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}