{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n\n  // 1. Initial Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Subsequent blocks have a 30% chance to be red, but not two reds in a row\n        const lastBlock = initialBlocks[i - 1];\n        const isLastRed = lastBlock.type === 'red';\n        const blockType = isLastRed ? 'blue' // Prevent two reds in a row\n        : Math.random() < 0.3 ? 'red' : 'blue';\n        initialBlocks.push({\n          type: blockType,\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      }\n    }\n    return initialBlocks;\n  });\n\n  // 3. Game Loop Effect\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                let newBlockType = 'blue';\n                if (lastBlockType !== 'red') {\n                  newBlockType = Math.random() < 0.3 ? 'red' : 'blue';\n                }\n                // If last block was red, new block must be blue\n\n                return [...prevBlocks, {\n                  type: newBlockType,\n                  x: lastBlock.x + blockWidth,\n                  width: blockWidth,\n                  height: 50\n                }];\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling overlaps with this block\n            const isOverlapping = duckRight > blockLeft && duckLeft < blockRight;\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n              triggerMCQ(i);\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n\n  // 3. Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Subsequent blocks have a 30% chance to be red, but not two reds in a row\n          const lastBlock = initialBlocks[i - 1];\n          const isLastRed = lastBlock.type === 'red';\n          const blockType = isLastRed ? 'blue' // Prevent two reds in a row\n          : Math.random() < 0.3 ? 'red' : 'blue';\n          initialBlocks.push({\n            type: blockType,\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        }\n      }\n      return initialBlocks;\n    });\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // 3. Handle Answer Function\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      // Update lives safely\n      setLives(prevLives => {\n        const newLives = prevLives - 1;\n        if (newLives <= 0) {\n          alert('Game Over!');\n          resetGame(); // Reset the game\n          return 3; // Reset lives to initial value\n        }\n        return newLives;\n      });\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"5L/agaqC4wa7jtylm9yU8N4nwHw=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","blocks","setBlocks","initialBlocks","i","push","type","x","width","height","lastBlock","isLastRed","blockType","Math","random","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prevLeft","potentialNewPos","gameWidth","current","clientWidth","length","prevBlocks","_prevBlocks","lastBlockType","newBlockType","duckLeft","duckRight","block","blockLeft","blockRight","isOverlapping","has","triggerMCQ","maxLeft","min","clearInterval","setTimeout","blockIndex","floor","prev","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n\r\n  // 1. Initial Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Subsequent blocks have a 30% chance to be red, but not two reds in a row\r\n        const lastBlock = initialBlocks[i - 1];\r\n        const isLastRed = lastBlock.type === 'red';\r\n        const blockType = isLastRed\r\n          ? 'blue' // Prevent two reds in a row\r\n          : Math.random() < 0.3\r\n          ? 'red'\r\n          : 'blue';\r\n        initialBlocks.push({\r\n          type: blockType,\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // 3. Game Loop Effect\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                let newBlockType = 'blue';\r\n\r\n                if (lastBlockType !== 'red') {\r\n                  newBlockType = Math.random() < 0.3 ? 'red' : 'blue';\r\n                }\r\n                // If last block was red, new block must be blue\r\n\r\n                return [\r\n                  ...prevBlocks,\r\n                  {\r\n                    type: newBlockType,\r\n                    x: lastBlock.x + blockWidth,\r\n                    width: blockWidth,\r\n                    height: 50,\r\n                  },\r\n                ];\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling overlaps with this block\r\n            const isOverlapping = duckRight > blockLeft && duckLeft < blockRight;\r\n\r\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\r\n              triggerMCQ(i);\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  // 3. Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Subsequent blocks have a 30% chance to be red, but not two reds in a row\r\n          const lastBlock = initialBlocks[i - 1];\r\n          const isLastRed = lastBlock.type === 'red';\r\n          const blockType = isLastRed\r\n            ? 'blue' // Prevent two reds in a row\r\n            : Math.random() < 0.3\r\n            ? 'red'\r\n            : 'blue';\r\n          initialBlocks.push({\r\n            type: blockType,\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // 3. Handle Answer Function\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      // Update lives safely\r\n      setLives((prevLives) => {\r\n        const newLives = prevLives - 1;\r\n        if (newLives <= 0) {\r\n          alert('Game Over!');\r\n          resetGame(); // Reset the game\r\n          return 3; // Reset lives to initial value\r\n        }\r\n        return newLives;\r\n      });\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}