{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImg from '../assets/bonus.png'; // Import the bonus image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n  const bonusInterval = 3000; // Time interval to generate bonus blocks (e.g., every 3 seconds)\n\n  // Helper function to generate platform blocks ensuring no two reds in a row\n  const generateBlock = lastBlockType => {\n    if (lastBlockType === 'red') {\n      return {\n        type: 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      return {\n        type: Math.random() < 0.3 ? 'red' : 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // Initial Platform Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // Bonus Blocks State\n  const [bonusBlocks, setBonusBlocks] = useState([]);\n\n  // Function to Generate Bonus Blocks at Intervals\n  useEffect(() => {\n    const interval = setInterval(() => {\n      generateBonusBlock();\n    }, bonusInterval); // Adjust the interval as needed\n\n    return () => clearInterval(interval);\n  }, [blocks, cameraX]);\n  const generateBonusBlock = () => {\n    // Determine the x position based on the last platform block\n    const lastBlock = blocks[blocks.length - 1];\n    const newBonusX = lastBlock.x + blockWidth * 5 + Math.random() * blockWidth * 5; // Randomize position\n\n    setBonusBlocks(prevBonusBlocks => [...prevBonusBlocks, {\n      id: Date.now(),\n      // Unique identifier\n      x: newBonusX,\n      y: jumpHeight + 50,\n      // Position it at jump height plus platform height\n      width: 50,\n      // Adjust as per image size\n      height: 50\n    }]);\n\n    // Optionally, remove old bonus blocks to prevent memory leaks\n    setBonusBlocks(prevBonusBlocks => prevBonusBlocks.filter(block => block.x - cameraX > -blockWidth * 2));\n  };\n\n  // Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - cameraX + gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 5) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastPlatformType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generateBlock(lastPlatformType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n            }\n\n            // Bonus blocks are generated separately\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n          const duckBottomY = ducklingHeight; // Assuming bottom of the canvas is y=0\n\n          // Iterate through all platform blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling is centrally on the red block\n            const isOnRedBlock = duckLeft >= blockLeft + threshold && duckRight <= blockRight - threshold && block.type === 'red' && !answeredBlocks.has(i);\n            if (isOnRedBlock) {\n              triggerMCQ(i, false); // false indicates it's not a bonus\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Check collision with bonus blocks\n          for (let i = 0; i < bonusBlocks.length; i++) {\n            const bonus = bonusBlocks[i];\n            const bonusLeft = bonus.x;\n            const bonusRight = bonus.x + bonus.width;\n            const bonusTop = bonus.y;\n            const bonusBottom = bonus.y + bonus.height;\n\n            // Duck's top position when jumping\n            const duckTop = isJumping ? jumpHeight : 0; // Simplistic approach\n\n            // Collision detection (overlapping x and y)\n            const isColliding = duckRight >= bonusLeft && duckLeft <= bonusRight && duckTop <= bonusBottom && duckBottomY >= bonusTop;\n            if (isColliding) {\n              triggerMCQ(bonus.id, true); // true indicates it's a bonus\n              // Remove the bonus block after collision\n              setBonusBlocks(prev => prev.filter(b => b.id !== bonus.id));\n              break; // Prevent multiple triggers\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, bonusBlocks, answeredBlocks, ducklingWidth, cameraX, isJumping]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = (identifier, isBonus) => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion({\n      ...questions[Math.floor(Math.random() * questions.length)],\n      isBonus // Flag to indicate if this is a bonus question\n    });\n    if (!isBonus) {\n      // Only add to answeredBlocks if it's a platform block\n      setAnsweredBlocks(prev => new Set(prev).add(identifier));\n    }\n  };\n\n  // Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two reds in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generateBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setBonusBlocks([]); // Reset bonus blocks\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // Handle Answer Function\n  const handleAnswer = (isCorrect, isBonus) => {\n    if (isBonus) {\n      if (isCorrect) {\n        setCoins(prevCoins => prevCoins + 5); // Bonus coins\n        setScore(prevScore => prevScore + 20); // Bonus score\n      }\n      // No penalty for incorrect bonus answers\n    } else {\n      if (isCorrect) {\n        setCoins(prevCoins => prevCoins + 1);\n        setScore(prevScore => prevScore + 10);\n      } else {\n        // Deduct a life\n        setLives(prevLives => {\n          const newLives = prevLives - 1;\n          if (newLives <= 0) {\n            alert('Game Over!');\n            resetGame(); // Reset the game entirely\n            return 3; // Reset lives to initial value after game over\n          }\n          return newLives;\n        });\n\n        // Reset the duckling's position to the beginning\n        setLeftPosition(50);\n        setCameraX(0);\n\n        // Optionally, reset answered blocks to allow revisiting questions\n        setAnsweredBlocks(new Set());\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), bonusBlocks.map(bonus => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bonus-block\",\n      style: {\n        left: `${bonus.x - cameraX}px`,\n        bottom: `${bonus.y}px`,\n        width: `${bonus.width}px`,\n        height: `${bonus.height}px`,\n        backgroundImage: `url(${bonusImg})`,\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat'\n      }\n    }, bonus.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: isCorrect => handleAnswer(isCorrect, currentQuestion.isBonus)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"g64RF7t6Wtk/rzTeSx4ovQZwhKY=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImg","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","bonusInterval","generateBlock","lastBlockType","type","x","width","height","Math","random","blocks","setBlocks","initialBlocks","i","push","newBlock","bonusBlocks","setBonusBlocks","interval","setInterval","generateBonusBlock","clearInterval","lastBlock","length","newBonusX","prevBonusBlocks","id","Date","now","y","filter","block","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","prevLeft","potentialNewPos","gameWidth","current","clientWidth","prevBlocks","_prevBlocks","lastPlatformType","duckLeft","duckRight","duckBottomY","blockLeft","blockRight","isOnRedBlock","has","triggerMCQ","bonus","bonusLeft","bonusRight","bonusTop","bonusBottom","duckTop","isColliding","prev","b","maxLeft","min","setTimeout","identifier","isBonus","floor","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","bottom","backgroundImage","backgroundSize","backgroundRepeat","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImg from '../assets/bonus.png'; // Import the bonus image\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n  const bonusInterval = 3000; // Time interval to generate bonus blocks (e.g., every 3 seconds)\r\n\r\n  // Helper function to generate platform blocks ensuring no two reds in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'red') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      return {\r\n        type: Math.random() < 0.3 ? 'red' : 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // Initial Platform Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // Bonus Blocks State\r\n  const [bonusBlocks, setBonusBlocks] = useState([]);\r\n\r\n  // Function to Generate Bonus Blocks at Intervals\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      generateBonusBlock();\r\n    }, bonusInterval); // Adjust the interval as needed\r\n\r\n    return () => clearInterval(interval);\r\n  }, [blocks, cameraX]);\r\n\r\n  const generateBonusBlock = () => {\r\n    // Determine the x position based on the last platform block\r\n    const lastBlock = blocks[blocks.length - 1];\r\n    const newBonusX = lastBlock.x + blockWidth * 5 + Math.random() * blockWidth * 5; // Randomize position\r\n\r\n    setBonusBlocks((prevBonusBlocks) => [\r\n      ...prevBonusBlocks,\r\n      {\r\n        id: Date.now(), // Unique identifier\r\n        x: newBonusX,\r\n        y: jumpHeight + 50, // Position it at jump height plus platform height\r\n        width: 50, // Adjust as per image size\r\n        height: 50,\r\n      },\r\n    ]);\r\n\r\n    // Optionally, remove old bonus blocks to prevent memory leaks\r\n    setBonusBlocks((prevBonusBlocks) =>\r\n      prevBonusBlocks.filter((block) => block.x - cameraX > -blockWidth * 2)\r\n    );\r\n  };\r\n\r\n  // Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - cameraX + gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 5) {\r\n              setBlocks((prevBlocks) => {\r\n                const lastPlatformType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generateBlock(lastPlatformType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n            }\r\n\r\n            // Bonus blocks are generated separately\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n          const duckBottomY = ducklingHeight; // Assuming bottom of the canvas is y=0\r\n\r\n          // Iterate through all platform blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling is centrally on the red block\r\n            const isOnRedBlock =\r\n              duckLeft >= blockLeft + threshold &&\r\n              duckRight <= blockRight - threshold &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i);\r\n\r\n            if (isOnRedBlock) {\r\n              triggerMCQ(i, false); // false indicates it's not a bonus\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Check collision with bonus blocks\r\n          for (let i = 0; i < bonusBlocks.length; i++) {\r\n            const bonus = bonusBlocks[i];\r\n            const bonusLeft = bonus.x;\r\n            const bonusRight = bonus.x + bonus.width;\r\n            const bonusTop = bonus.y;\r\n            const bonusBottom = bonus.y + bonus.height;\r\n\r\n            // Duck's top position when jumping\r\n            const duckTop = isJumping ? jumpHeight : 0; // Simplistic approach\r\n\r\n            // Collision detection (overlapping x and y)\r\n            const isColliding =\r\n              duckRight >= bonusLeft &&\r\n              duckLeft <= bonusRight &&\r\n              duckTop <= bonusBottom &&\r\n              duckBottomY >= bonusTop;\r\n\r\n            if (isColliding) {\r\n              triggerMCQ(bonus.id, true); // true indicates it's a bonus\r\n              // Remove the bonus block after collision\r\n              setBonusBlocks((prev) => prev.filter((b) => b.id !== bonus.id));\r\n              break; // Prevent multiple triggers\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, bonusBlocks, answeredBlocks, ducklingWidth, cameraX, isJumping]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (identifier, isBonus) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion({\r\n      ...questions[Math.floor(Math.random() * questions.length)],\r\n      isBonus, // Flag to indicate if this is a bonus question\r\n    });\r\n    if (!isBonus) {\r\n      // Only add to answeredBlocks if it's a platform block\r\n      setAnsweredBlocks((prev) => new Set(prev).add(identifier));\r\n    }\r\n  };\r\n\r\n  // Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two reds in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generateBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setBonusBlocks([]); // Reset bonus blocks\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // Handle Answer Function\r\n  const handleAnswer = (isCorrect, isBonus) => {\r\n    if (isBonus) {\r\n      if (isCorrect) {\r\n        setCoins((prevCoins) => prevCoins + 5); // Bonus coins\r\n        setScore((prevScore) => prevScore + 20); // Bonus score\r\n      }\r\n      // No penalty for incorrect bonus answers\r\n    } else {\r\n      if (isCorrect) {\r\n        setCoins((prevCoins) => prevCoins + 1);\r\n        setScore((prevScore) => prevScore + 10);\r\n      } else {\r\n        // Deduct a life\r\n        setLives((prevLives) => {\r\n          const newLives = prevLives - 1;\r\n          if (newLives <= 0) {\r\n            alert('Game Over!');\r\n            resetGame(); // Reset the game entirely\r\n            return 3; // Reset lives to initial value after game over\r\n          }\r\n          return newLives;\r\n        });\r\n\r\n        // Reset the duckling's position to the beginning\r\n        setLeftPosition(50);\r\n        setCameraX(0);\r\n\r\n        // Optionally, reset answered blocks to allow revisiting questions\r\n        setAnsweredBlocks(new Set());\r\n      }\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      {/* Render Bonus Blocks */}\r\n      {bonusBlocks.map((bonus) => (\r\n        <div\r\n          key={bonus.id}\r\n          className=\"bonus-block\"\r\n          style={{\r\n            left: `${bonus.x - cameraX}px`,\r\n            bottom: `${bonus.y}px`,\r\n            width: `${bonus.width}px`,\r\n            height: `${bonus.height}px`,\r\n            backgroundImage: `url(${bonusImg})`,\r\n            backgroundSize: 'contain',\r\n            backgroundRepeat: 'no-repeat',\r\n          }}\r\n        />\r\n      ))}\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal\r\n          questionData={currentQuestion}\r\n          onAnswer={(isCorrect) => handleAnswer(isCorrect, currentQuestion.isBonus)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,iBAAiB;AACxB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,SAAS,QAAQ,mBAAmB;AAC7C,OAAOC,QAAQ,MAAM,qBAAqB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAGA,CAAC;EACjBC,QAAQ;EACRC,QAAQ;EACRC,QAAQ;EACRC,KAAK;EACLC,KAAK;EACLC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,YAAY,GAAGf,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,IAAI8B,GAAG,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC;EAEzC,MAAMiC,YAAY,GAAG,CAAC,CAAC,CAAC;EACxB,MAAMC,UAAU,GAAG,GAAG;EACtB,MAAMC,YAAY,GAAG,GAAG;EACxB,MAAMC,UAAU,GAAG,GAAG;EACtB,MAAMC,aAAa,GAAG,EAAE,CAAC,CAAC;EAC1B,MAAMC,cAAc,GAAG,EAAE,CAAC,CAAC;EAC3B,MAAMC,SAAS,GAAG,EAAE,CAAC,CAAC;EACtB,MAAMC,aAAa,GAAG,IAAI,CAAC,CAAC;;EAE5B;EACA,MAAMC,aAAa,GAAIC,aAAa,IAAK;IACvC,IAAIA,aAAa,KAAK,KAAK,EAAE;MAC3B,OAAO;QACLC,IAAI,EAAE,MAAM;QACZC,CAAC,EAAE,CAAC;QAAE;QACNC,KAAK,EAAET,UAAU;QACjBU,MAAM,EAAE;MACV,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLH,IAAI,EAAEI,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,MAAM;QAC1CJ,CAAC,EAAE,CAAC;QAAE;QACNC,KAAK,EAAET,UAAU;QACjBU,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGlD,QAAQ,CAAC,MAAM;IACzC,MAAMmD,aAAa,GAAG,EAAE;IAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,IAAIA,CAAC,KAAK,CAAC,EAAE;QACX;QACAD,aAAa,CAACE,IAAI,CAAC;UACjBV,IAAI,EAAE,MAAM;UACZC,CAAC,EAAEQ,CAAC,GAAGhB,UAAU;UACjBS,KAAK,EAAET,UAAU;UACjBU,MAAM,EAAE;QACV,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA,MAAMJ,aAAa,GAAGS,aAAa,CAACC,CAAC,GAAG,CAAC,CAAC,CAACT,IAAI;QAC/C,MAAMW,QAAQ,GAAGb,aAAa,CAACC,aAAa,CAAC;QAC7CY,QAAQ,CAACV,CAAC,GAAGQ,CAAC,GAAGhB,UAAU;QAC3Be,aAAa,CAACE,IAAI,CAACC,QAAQ,CAAC;MAC9B;IACF;IAEA,OAAOH,aAAa;EACtB,CAAC,CAAC;;EAEF;EACA,MAAM,CAACI,WAAW,EAAEC,cAAc,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMwD,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCC,kBAAkB,CAAC,CAAC;IACtB,CAAC,EAAEnB,aAAa,CAAC,CAAC,CAAC;;IAEnB,OAAO,MAAMoB,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACR,MAAM,EAAElB,OAAO,CAAC,CAAC;EAErB,MAAM4B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAME,SAAS,GAAGZ,MAAM,CAACA,MAAM,CAACa,MAAM,GAAG,CAAC,CAAC;IAC3C,MAAMC,SAAS,GAAGF,SAAS,CAACjB,CAAC,GAAGR,UAAU,GAAG,CAAC,GAAGW,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGZ,UAAU,GAAG,CAAC,CAAC,CAAC;;IAEjFoB,cAAc,CAAEQ,eAAe,IAAK,CAClC,GAAGA,eAAe,EAClB;MACEC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAE;MAChBvB,CAAC,EAAEmB,SAAS;MACZK,CAAC,EAAElC,UAAU,GAAG,EAAE;MAAE;MACpBW,KAAK,EAAE,EAAE;MAAE;MACXC,MAAM,EAAE;IACV,CAAC,CACF,CAAC;;IAEF;IACAU,cAAc,CAAEQ,eAAe,IAC7BA,eAAe,CAACK,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAAC1B,CAAC,GAAGb,OAAO,GAAG,CAACK,UAAU,GAAG,CAAC,CACvE,CAAC;EACH,CAAC;;EAED;EACAnC,SAAS,CAAC,MAAM;IACd,MAAMsE,aAAa,GAAIC,CAAC,IAAK;MAC3B,IAAIA,CAAC,CAACC,IAAI,KAAK,OAAO,IAAI,CAACrD,SAAS,IAAI,CAACE,QAAQ,EAAE;QACjDoD,IAAI,CAAC,CAAC;MACR;IACF,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEL,aAAa,CAAC;IACjD,OAAO,MAAMI,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;EACnE,CAAC,EAAE,CAACnD,SAAS,EAAEE,QAAQ,CAAC,CAAC;;EAEzB;EACArB,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,QAAQ,EAAE;MACb,MAAMwD,QAAQ,GAAGpB,WAAW,CAAC,MAAM;QACjCvC,eAAe,CAAE4D,QAAQ,IAAK;UAC5B,MAAMC,eAAe,GAAGD,QAAQ,GAAG9C,YAAY;UAC/C,MAAMgD,SAAS,GAAGhE,YAAY,CAACiE,OAAO,CAACC,WAAW;;UAElD;UACA,IAAIH,eAAe,GAAGjD,OAAO,IAAIkD,SAAS,GAAG,CAAC,EAAE;YAC9CjD,UAAU,CAACgD,eAAe,GAAGjD,OAAO,GAAGkD,SAAS,GAAG,CAAC,CAAC;;YAErD;YACA,MAAMpB,SAAS,GAAGZ,MAAM,CAACA,MAAM,CAACa,MAAM,GAAG,CAAC,CAAC;YAC3C,IAAID,SAAS,CAACjB,CAAC,GAAGb,OAAO,GAAGkD,SAAS,GAAG7C,UAAU,GAAG,CAAC,EAAE;cACtDc,SAAS,CAAEkC,UAAU,IAAK;gBAAA,IAAAC,WAAA;gBACxB,MAAMC,gBAAgB,GAAG,EAAAD,WAAA,GAAAD,UAAU,CAACA,UAAU,CAACtB,MAAM,GAAG,CAAC,CAAC,cAAAuB,WAAA,uBAAjCA,WAAA,CAAmC1C,IAAI,KAAI,MAAM;gBAC1E,MAAMW,QAAQ,GAAGb,aAAa,CAAC6C,gBAAgB,CAAC;gBAChDhC,QAAQ,CAACV,CAAC,GAAGwC,UAAU,CAACA,UAAU,CAACtB,MAAM,GAAG,CAAC,CAAC,CAAClB,CAAC,GAAGR,UAAU;gBAC7D,OAAO,CAAC,GAAGgD,UAAU,EAAE9B,QAAQ,CAAC;cAClC,CAAC,CAAC;YACJ;;YAEA;UACF;UAEA,MAAMiC,QAAQ,GAAGP,eAAe;UAChC,MAAMQ,SAAS,GAAGD,QAAQ,GAAGlD,aAAa;UAC1C,MAAMoD,WAAW,GAAGnD,cAAc,CAAC,CAAC;;UAEpC;UACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACa,MAAM,EAAEV,CAAC,EAAE,EAAE;YACtC,MAAMkB,KAAK,GAAGrB,MAAM,CAACG,CAAC,CAAC;YACvB,MAAMsC,SAAS,GAAGpB,KAAK,CAAC1B,CAAC;YACzB,MAAM+C,UAAU,GAAGrB,KAAK,CAAC1B,CAAC,GAAG0B,KAAK,CAACzB,KAAK;;YAExC;YACA,MAAM+C,YAAY,GAChBL,QAAQ,IAAIG,SAAS,GAAGnD,SAAS,IACjCiD,SAAS,IAAIG,UAAU,GAAGpD,SAAS,IACnC+B,KAAK,CAAC3B,IAAI,KAAK,KAAK,IACpB,CAACf,cAAc,CAACiE,GAAG,CAACzC,CAAC,CAAC;YAExB,IAAIwC,YAAY,EAAE;cAChBE,UAAU,CAAC1C,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;cACtB,OAAO2B,QAAQ,CAAC,CAAC;YACnB;UACF;;UAEA;UACA,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,WAAW,CAACO,MAAM,EAAEV,CAAC,EAAE,EAAE;YAC3C,MAAM2C,KAAK,GAAGxC,WAAW,CAACH,CAAC,CAAC;YAC5B,MAAM4C,SAAS,GAAGD,KAAK,CAACnD,CAAC;YACzB,MAAMqD,UAAU,GAAGF,KAAK,CAACnD,CAAC,GAAGmD,KAAK,CAAClD,KAAK;YACxC,MAAMqD,QAAQ,GAAGH,KAAK,CAAC3B,CAAC;YACxB,MAAM+B,WAAW,GAAGJ,KAAK,CAAC3B,CAAC,GAAG2B,KAAK,CAACjD,MAAM;;YAE1C;YACA,MAAMsD,OAAO,GAAGhF,SAAS,GAAGc,UAAU,GAAG,CAAC,CAAC,CAAC;;YAE5C;YACA,MAAMmE,WAAW,GACfb,SAAS,IAAIQ,SAAS,IACtBT,QAAQ,IAAIU,UAAU,IACtBG,OAAO,IAAID,WAAW,IACtBV,WAAW,IAAIS,QAAQ;YAEzB,IAAIG,WAAW,EAAE;cACfP,UAAU,CAACC,KAAK,CAAC9B,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;cAC5B;cACAT,cAAc,CAAE8C,IAAI,IAAKA,IAAI,CAACjC,MAAM,CAAEkC,CAAC,IAAKA,CAAC,CAACtC,EAAE,KAAK8B,KAAK,CAAC9B,EAAE,CAAC,CAAC;cAC/D,MAAM,CAAC;YACT;UACF;;UAEA;UACA,MAAMuC,OAAO,GAAGvD,MAAM,CAACA,MAAM,CAACa,MAAM,GAAG,CAAC,CAAC,CAAClB,CAAC,GAAGR,UAAU,GAAGC,aAAa;UACxE,OAAOU,IAAI,CAAC0D,GAAG,CAACzB,eAAe,EAAEwB,OAAO,CAAC;QAC3C,CAAC,CAAC;MACJ,CAAC,EAAE,EAAE,CAAC;MAEN,OAAO,MAAM5C,aAAa,CAACkB,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACxD,QAAQ,EAAE2B,MAAM,EAAEM,WAAW,EAAE3B,cAAc,EAAES,aAAa,EAAEN,OAAO,EAAEX,SAAS,CAAC,CAAC;EAEtF,MAAMsD,IAAI,GAAGA,CAAA,KAAM;IACjB,IAAI,CAACtD,SAAS,EAAE;MACdC,YAAY,CAAC,IAAI,CAAC;MAClBqF,UAAU,CAAC,MAAMrF,YAAY,CAAC,KAAK,CAAC,EAAEc,YAAY,CAAC;IACrD;EACF,CAAC;EAED,MAAM2D,UAAU,GAAGA,CAACa,UAAU,EAAEC,OAAO,KAAK;IAC1CrF,WAAW,CAAC,IAAI,CAAC;IACjBE,UAAU,CAAC,IAAI,CAAC;IAChBE,kBAAkB,CAAC;MACjB,GAAGtB,SAAS,CAAC0C,IAAI,CAAC8D,KAAK,CAAC9D,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG3C,SAAS,CAACyD,MAAM,CAAC,CAAC;MAC1D8C,OAAO,CAAE;IACX,CAAC,CAAC;IACF,IAAI,CAACA,OAAO,EAAE;MACZ;MACA/E,iBAAiB,CAAEyE,IAAI,IAAK,IAAIxE,GAAG,CAACwE,IAAI,CAAC,CAACQ,GAAG,CAACH,UAAU,CAAC,CAAC;IAC5D;EACF,CAAC;;EAED;EACA,MAAMI,SAAS,GAAGA,CAAA,KAAM;IACtB5F,eAAe,CAAC,EAAE,CAAC;IACnBU,iBAAiB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC5BE,UAAU,CAAC,CAAC,CAAC;IACbT,WAAW,CAAC,KAAK,CAAC;IAClBF,YAAY,CAAC,KAAK,CAAC;IACnB6B,SAAS,CAAC,MAAM;MACd,MAAMC,aAAa,GAAG,EAAE;MAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC3B,IAAIA,CAAC,KAAK,CAAC,EAAE;UACX;UACAD,aAAa,CAACE,IAAI,CAAC;YACjBV,IAAI,EAAE,MAAM;YACZC,CAAC,EAAEQ,CAAC,GAAGhB,UAAU;YACjBS,KAAK,EAAET,UAAU;YACjBU,MAAM,EAAE;UACV,CAAC,CAAC;QACJ,CAAC,MAAM;UACL;UACA,MAAMJ,aAAa,GAAGS,aAAa,CAACC,CAAC,GAAG,CAAC,CAAC,CAACT,IAAI;UAC/C,MAAMW,QAAQ,GAAGb,aAAa,CAACC,aAAa,CAAC;UAC7CY,QAAQ,CAACV,CAAC,GAAGQ,CAAC,GAAGhB,UAAU;UAC3Be,aAAa,CAACE,IAAI,CAACC,QAAQ,CAAC;QAC9B;MACF;MAEA,OAAOH,aAAa;IACtB,CAAC,CAAC;IACFK,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB7C,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACbD,QAAQ,CAAC,CAAC,CAAC;IACXE,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;;EAED;EACA,MAAMoG,YAAY,GAAGA,CAACC,SAAS,EAAEL,OAAO,KAAK;IAC3C,IAAIA,OAAO,EAAE;MACX,IAAIK,SAAS,EAAE;QACbrG,QAAQ,CAAEsG,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;QACxCxG,QAAQ,CAAEyG,SAAS,IAAKA,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC;MAC3C;MACA;IACF,CAAC,MAAM;MACL,IAAIF,SAAS,EAAE;QACbrG,QAAQ,CAAEsG,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;QACtCxG,QAAQ,CAAEyG,SAAS,IAAKA,SAAS,GAAG,EAAE,CAAC;MACzC,CAAC,MAAM;QACL;QACAxG,QAAQ,CAAEyG,SAAS,IAAK;UACtB,MAAMC,QAAQ,GAAGD,SAAS,GAAG,CAAC;UAC9B,IAAIC,QAAQ,IAAI,CAAC,EAAE;YACjBC,KAAK,CAAC,YAAY,CAAC;YACnBP,SAAS,CAAC,CAAC,CAAC,CAAC;YACb,OAAO,CAAC,CAAC,CAAC;UACZ;UACA,OAAOM,QAAQ;QACjB,CAAC,CAAC;;QAEF;QACAlG,eAAe,CAAC,EAAE,CAAC;QACnBa,UAAU,CAAC,CAAC,CAAC;;QAEb;QACAH,iBAAiB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;MAC9B;IACF;IAEAP,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACpBE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,oBACEjB,OAAA;IAAK+G,SAAS,EAAC,YAAY;IAACC,GAAG,EAAEvG,YAAa;IAAAwG,QAAA,gBAC5CjH,OAAA;MAAK+G,SAAS,EAAC,UAAU;MAAAE,QAAA,EACtBxE,MAAM,CAACyE,GAAG,CAAC,CAACpD,KAAK,EAAEqD,KAAK,kBACvBnH,OAAA;QAEE+G,SAAS,EAAE,SAASjD,KAAK,CAAC3B,IAAI,EAAG;QACjCiF,KAAK,EAAE;UACLC,IAAI,EAAE,GAAGvD,KAAK,CAAC1B,CAAC,GAAGb,OAAO,IAAI;UAAE;UAChCc,KAAK,EAAE,GAAGyB,KAAK,CAACzB,KAAK,IAAI;UACzBC,MAAM,EAAE,GAAGwB,KAAK,CAACxB,MAAM;QACzB;MAAE,GANG6E,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAEL1E,WAAW,CAACmE,GAAG,CAAE3B,KAAK,iBACrBvF,OAAA;MAEE+G,SAAS,EAAC,aAAa;MACvBK,KAAK,EAAE;QACLC,IAAI,EAAE,GAAG9B,KAAK,CAACnD,CAAC,GAAGb,OAAO,IAAI;QAC9BmG,MAAM,EAAE,GAAGnC,KAAK,CAAC3B,CAAC,IAAI;QACtBvB,KAAK,EAAE,GAAGkD,KAAK,CAAClD,KAAK,IAAI;QACzBC,MAAM,EAAE,GAAGiD,KAAK,CAACjD,MAAM,IAAI;QAC3BqF,eAAe,EAAE,OAAO7H,QAAQ,GAAG;QACnC8H,cAAc,EAAE,SAAS;QACzBC,gBAAgB,EAAE;MACpB;IAAE,GAVGtC,KAAK,CAAC9B,EAAE;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWd,CACF,CAAC,eACFzH,OAAA,CAACL,QAAQ;MACPoH,SAAS,EAAEnG,SAAS,GAAG,SAAS,GAAG,EAAG;MACtCwG,KAAK,EAAE;QACLC,IAAI,EAAE,GAAG3G,YAAY,GAAGa,OAAO,IAAI;QAAE;QACrCuG,SAAS,EAAElH,SAAS,GAAG,eAAec,UAAU,KAAK,GAAG,eAAe;QACvEqG,UAAU,EAAE,aAAapG,YAAY;MACvC;IAAE;MAAA2F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACDzG,OAAO,IAAIE,eAAe,iBACzBlB,OAAA,CAACJ,QAAQ;MACPoI,YAAY,EAAE9G,eAAgB;MAC9B+G,QAAQ,EAAGxB,SAAS,IAAKD,YAAY,CAACC,SAAS,EAAEvF,eAAe,CAACkF,OAAO;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3E,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjH,EAAA,CArVIP,SAAS;AAAAiI,EAAA,GAATjI,SAAS;AAuVf,eAAeA,SAAS;AAAC,IAAAiI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}