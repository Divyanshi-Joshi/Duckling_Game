{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImage from '../assets/bonus.png'; // Import bonus image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const [bonusBlocks, setBonusBlocks] = useState([]); // Bonus Blocks State\n  const [activeBonusMCQ, setActiveBonusMCQ] = useState(false); // Active Bonus MCQ State\n\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n\n  // Helper function to generate blocks ensuring no two reds in a row\n  const generateBlock = lastBlockType => {\n    if (lastBlockType === 'red') {\n      return {\n        type: 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      return {\n        type: Math.random() < 0.3 ? 'red' : 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // Helper function to generate a bonus block\n  const generateBonusBlock = () => {\n    // Determine the x position for the new bonus block\n    const lastBonusBlock = bonusBlocks[bonusBlocks.length - 1];\n    const lastBlock = blocks[blocks.length - 1];\n    const gameWidth = gameBoardRef.current.clientWidth;\n\n    // Set a minimum distance between bonus blocks to avoid clutter\n    const minDistance = 300; // pixels\n    let newX = gameWidth + cameraX + blockWidth * 5 + (lastBlock ? lastBlock.x : 0);\n    if (lastBonusBlock) {\n      newX = lastBonusBlock.x + blockWidth * 5; // Ensure spacing\n    }\n    return {\n      x: newX,\n      id: Date.now() // Unique identifier\n    };\n  };\n\n  // 1. Initial Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // 2. Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // 3. Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generateBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n            }\n\n            // Dynamically add bonus blocks\n            const bonusGenerationInterval = 5000; // milliseconds\n            const now = Date.now();\n            if (bonusBlocks.length === 0 || now - bonusBlocks[bonusBlocks.length - 1].timestamp >= bonusGenerationInterval) {\n              const newBonusBlock = {\n                ...generateBonusBlock(),\n                timestamp: now\n              };\n              setBonusBlocks(prevBonusBlocks => [...prevBonusBlocks, newBonusBlock]);\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling overlaps with this block\n            const isOverlapping = duckRight > blockLeft && duckLeft < blockRight;\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n              triggerMCQ(i);\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Collision Detection for Bonus Blocks\n          bonusBlocks.forEach(bonus => {\n            // Calculate duckling's bounding box during jump\n            const duckTop = window.innerHeight - 50 - jumpHeight - ducklingHeight; // Adjust based on CSS positioning\n            const duckBottom = window.innerHeight - 50; // Fixed platform height\n\n            // Define bonus block dimensions\n            const bonusLeft = bonus.x - cameraX;\n            const bonusRight = bonusLeft + 50; // Adjust based on bonus.png size\n            const bonusTop = window.innerHeight - 50 - jumpHeight - 30; // Same as 'top' in render\n            const bonusBottom = bonusTop + 50; // Adjust based on bonus.png size\n\n            // Simple AABB (Axis-Aligned Bounding Box) Collision Detection\n            const isColliding = duckRight > bonusLeft && duckLeft < bonusRight && (isJumping || leftPosition >= bonus.x - cameraX - ducklingWidth / 2 && leftPosition <= bonus.x - cameraX + ducklingWidth / 2) && !activeBonusMCQ; // Prevent multiple bonus MCQs at the same time\n\n            if (isColliding) {\n              triggerBonusMCQ();\n\n              // Remove the bonus block after it's triggered\n              setBonusBlocks(prevBonusBlocks => prevBonusBlocks.filter(b => b.id !== bonus.id));\n            }\n          });\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, bonusBlocks, activeBonusMCQ]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const triggerBonusMCQ = () => {\n    setIsPaused(true);\n    setActiveBonusMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n  };\n\n  // 4. Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBonusBlocks([]); // Clear all bonus blocks\n    setActiveBonusMCQ(false); // Reset bonus MCQ state\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two reds in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generateBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // 5. Handle Regular MCQ Answer\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      // Deduct a life\n      setLives(prevLives => {\n        const newLives = prevLives - 1;\n        if (newLives <= 0) {\n          alert('Game Over!');\n          resetGame(); // Reset the game entirely\n          return 3; // Reset lives to initial value after game over\n        }\n        return newLives;\n      });\n\n      // Reset the duckling's position to the beginning\n      setLeftPosition(50);\n      setCameraX(0);\n\n      // Optionally, reset answered blocks to allow revisiting questions\n      setAnsweredBlocks(new Set());\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n\n  // 6. Handle Bonus MCQ Answer\n  const handleBonusAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 5); // Grant extra coins\n      setScore(prevScore => prevScore + 20); // Optionally, grant more score\n      // Optionally, provide feedback to the player\n    } else {\n      // No penalty, but also no coins\n      // Optionally, provide feedback to the player\n    }\n    setIsPaused(false); // Resume the game\n    setActiveBonusMCQ(false); // Hide the bonus MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), bonusBlocks.map(bonus => /*#__PURE__*/_jsxDEV(\"img\", {\n      src: bonusImage,\n      alt: \"Bonus Block\",\n      className: \"bonus-block\",\n      style: {\n        left: `${bonus.x - cameraX}px`,\n        // Position the bonus block at the duckling's jump height\n        top: `${window.innerHeight - 50 - jumpHeight - 30}px` // Adjust '30' as needed for better positioning\n      }\n    }, bonus.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }, this), activeBonusMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleBonusAnswer,\n      isBonus: true // Pass a prop to indicate it's a bonus MCQ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"H7B8HduVevxALDSYz7Cv5VTZjSg=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImage","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","bonusBlocks","setBonusBlocks","activeBonusMCQ","setActiveBonusMCQ","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","generateBlock","lastBlockType","type","x","width","height","Math","random","generateBonusBlock","lastBonusBlock","length","lastBlock","blocks","gameWidth","current","clientWidth","minDistance","newX","id","Date","now","setBlocks","initialBlocks","i","push","newBlock","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prevLeft","potentialNewPos","prevBlocks","_prevBlocks","bonusGenerationInterval","timestamp","newBonusBlock","prevBonusBlocks","duckLeft","duckRight","block","blockLeft","blockRight","isOverlapping","has","triggerMCQ","forEach","bonus","duckTop","innerHeight","duckBottom","bonusLeft","bonusRight","bonusTop","bonusBottom","isColliding","triggerBonusMCQ","filter","b","maxLeft","min","clearInterval","setTimeout","blockIndex","floor","prev","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","handleBonusAnswer","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","top","transform","transition","questionData","onAnswer","isBonus","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImage from '../assets/bonus.png'; // Import bonus image\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n  const [bonusBlocks, setBonusBlocks] = useState([]); // Bonus Blocks State\r\n  const [activeBonusMCQ, setActiveBonusMCQ] = useState(false); // Active Bonus MCQ State\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n\r\n  // Helper function to generate blocks ensuring no two reds in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'red') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      return {\r\n        type: Math.random() < 0.3 ? 'red' : 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // Helper function to generate a bonus block\r\n  const generateBonusBlock = () => {\r\n    // Determine the x position for the new bonus block\r\n    const lastBonusBlock = bonusBlocks[bonusBlocks.length - 1];\r\n    const lastBlock = blocks[blocks.length - 1];\r\n    const gameWidth = gameBoardRef.current.clientWidth;\r\n    \r\n    // Set a minimum distance between bonus blocks to avoid clutter\r\n    const minDistance = 300; // pixels\r\n    let newX = gameWidth + cameraX + blockWidth * 5 + (lastBlock ? lastBlock.x : 0);\r\n\r\n    if (lastBonusBlock) {\r\n      newX = lastBonusBlock.x + blockWidth * 5; // Ensure spacing\r\n    }\r\n\r\n    return {\r\n      x: newX,\r\n      id: Date.now(), // Unique identifier\r\n    };\r\n  };\r\n\r\n  // 1. Initial Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // 2. Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // 3. Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generateBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n            }\r\n\r\n            // Dynamically add bonus blocks\r\n            const bonusGenerationInterval = 5000; // milliseconds\r\n            const now = Date.now();\r\n\r\n            if (\r\n              bonusBlocks.length === 0 ||\r\n              now - bonusBlocks[bonusBlocks.length - 1].timestamp >= bonusGenerationInterval\r\n            ) {\r\n              const newBonusBlock = {\r\n                ...generateBonusBlock(),\r\n                timestamp: now,\r\n              };\r\n              setBonusBlocks((prevBonusBlocks) => [...prevBonusBlocks, newBonusBlock]);\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling overlaps with this block\r\n            const isOverlapping = duckRight > blockLeft && duckLeft < blockRight;\r\n\r\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\r\n              triggerMCQ(i);\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Collision Detection for Bonus Blocks\r\n          bonusBlocks.forEach((bonus) => {\r\n            // Calculate duckling's bounding box during jump\r\n            const duckTop = window.innerHeight - 50 - jumpHeight - ducklingHeight; // Adjust based on CSS positioning\r\n            const duckBottom = window.innerHeight - 50; // Fixed platform height\r\n\r\n            // Define bonus block dimensions\r\n            const bonusLeft = bonus.x - cameraX;\r\n            const bonusRight = bonusLeft + 50; // Adjust based on bonus.png size\r\n            const bonusTop = window.innerHeight - 50 - jumpHeight - 30; // Same as 'top' in render\r\n            const bonusBottom = bonusTop + 50; // Adjust based on bonus.png size\r\n\r\n            // Simple AABB (Axis-Aligned Bounding Box) Collision Detection\r\n            const isColliding =\r\n              duckRight > bonusLeft &&\r\n              duckLeft < bonusRight &&\r\n              (isJumping ||\r\n                (leftPosition >= bonus.x - cameraX - ducklingWidth / 2 &&\r\n                 leftPosition <= bonus.x - cameraX + ducklingWidth / 2)) &&\r\n              !activeBonusMCQ; // Prevent multiple bonus MCQs at the same time\r\n\r\n            if (isColliding) {\r\n              triggerBonusMCQ();\r\n\r\n              // Remove the bonus block after it's triggered\r\n              setBonusBlocks((prevBonusBlocks) =>\r\n                prevBonusBlocks.filter((b) => b.id !== bonus.id)\r\n              );\r\n            }\r\n          });\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, bonusBlocks, activeBonusMCQ]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const triggerBonusMCQ = () => {\r\n    setIsPaused(true);\r\n    setActiveBonusMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n  };\r\n\r\n  // 4. Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBonusBlocks([]); // Clear all bonus blocks\r\n    setActiveBonusMCQ(false); // Reset bonus MCQ state\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two reds in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generateBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // 5. Handle Regular MCQ Answer\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      // Deduct a life\r\n      setLives((prevLives) => {\r\n        const newLives = prevLives - 1;\r\n        if (newLives <= 0) {\r\n          alert('Game Over!');\r\n          resetGame(); // Reset the game entirely\r\n          return 3; // Reset lives to initial value after game over\r\n        }\r\n        return newLives;\r\n      });\r\n\r\n      // Reset the duckling's position to the beginning\r\n      setLeftPosition(50);\r\n      setCameraX(0);\r\n\r\n      // Optionally, reset answered blocks to allow revisiting questions\r\n      setAnsweredBlocks(new Set());\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  // 6. Handle Bonus MCQ Answer\r\n  const handleBonusAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 5); // Grant extra coins\r\n      setScore((prevScore) => prevScore + 20); // Optionally, grant more score\r\n      // Optionally, provide feedback to the player\r\n    } else {\r\n      // No penalty, but also no coins\r\n      // Optionally, provide feedback to the player\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setActiveBonusMCQ(false); // Hide the bonus MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Render Bonus Blocks */}\r\n      {bonusBlocks.map((bonus) => (\r\n        <img\r\n          key={bonus.id}\r\n          src={bonusImage}\r\n          alt=\"Bonus Block\"\r\n          className=\"bonus-block\"\r\n          style={{\r\n            left: `${bonus.x - cameraX}px`,\r\n            // Position the bonus block at the duckling's jump height\r\n            top: `${window.innerHeight - 50 - jumpHeight - 30}px`, // Adjust '30' as needed for better positioning\r\n          }}\r\n        />\r\n      ))}\r\n\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n      {/* Bonus MCQ Modal */}\r\n      {activeBonusMCQ && currentQuestion && (\r\n        <MCQModal\r\n          questionData={currentQuestion}\r\n          onAnswer={handleBonusAnswer}\r\n          isBonus={true} // Pass a prop to indicate it's a bonus MCQ\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}