{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImage from '../assets/bonus.png'; // Import the bonus block image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const [bonusBlocks, setBonusBlocks] = useState([]); // State for bonus blocks\n\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n\n  // Helper function to generate blocks ensuring no two reds in a row\n  const generateBlock = lastBlockType => {\n    if (lastBlockType === 'red') {\n      return {\n        type: 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      return {\n        type: Math.random() < 0.3 ? 'red' : 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // Enhanced Helper function to generate bonus blocks\n  const generateBonusBlock = existingBlocks => {\n    let valid = false;\n    let newBonusBlock = null;\n    const maxAttempts = 100; // To prevent infinite loops\n\n    let attempts = 0;\n    while (!valid && attempts < maxAttempts) {\n      attempts += 1;\n      const potentialX = Math.floor(Math.random() * 50) * blockWidth + 600; // Start after first 6 blocks (600px)\n\n      // Ensure bonus block is not within the initial 600px and not overlapping any red blocks\n      const nearRedBlock = existingBlocks.some(block => {\n        return Math.abs(block.x - potentialX) < blockWidth * 2; // At least 2 blocks away from any red block\n      });\n      if (!nearRedBlock) {\n        newBonusBlock = {\n          x: potentialX,\n          // Position bonus block further ahead\n          y: 100,\n          // Height above the platform\n          width: blockWidth,\n          height: 50,\n          used: false // Track if the block has been used\n        };\n        valid = true;\n      }\n    }\n    return newBonusBlock;\n  };\n\n  // 1. Initial Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // Initialize and manage bonus blocks ensuring they don't overlap with red blocks and are not in the initial area\n  useEffect(() => {\n    const initialBonusBlocks = [];\n    for (let i = 0; i < 3; i++) {\n      const bonusBlock = generateBonusBlock(blocks);\n      if (bonusBlock) {\n        initialBonusBlocks.push(bonusBlock);\n      }\n    }\n    setBonusBlocks(initialBonusBlocks);\n  }, [blocks]);\n\n  // ... [Rest of the code remains unchanged]\n\n  // 3. Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 10) {\n              // Increased buffer\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generateBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n\n              // Optionally, add new bonus blocks as the game progresses\n              setBonusBlocks(prevBonus => {\n                const potentialBonus = generateBonusBlock(blocks);\n                if (potentialBonus) {\n                  return [...prevBonus, potentialBonus];\n                }\n                return prevBonus;\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n          const duckBottom = 50; // Duckling's bottom position\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling is centrally on the red block\n            const isOnRedBlock = duckLeft >= blockLeft + threshold && duckRight <= blockRight - threshold && block.type === 'red' && !answeredBlocks.has(i);\n            if (isOnRedBlock) {\n              triggerMCQ(i);\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Check for bonus block collision\n          bonusBlocks.forEach((bonusBlock, index) => {\n            if (!bonusBlock.used && isJumping) {\n              const blockLeft = bonusBlock.x;\n              const blockRight = bonusBlock.x + bonusBlock.width;\n              const blockBottom = bonusBlock.y + bonusBlock.height;\n              if (duckLeft >= blockLeft && duckRight <= blockRight && duckBottom <= blockBottom) {\n                triggerBonusMCQ(index);\n              }\n            }\n          });\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, bonusBlocks, isJumping]);\n\n  // ... [Rest of the code remains unchanged]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), bonusBlocks.map((bonusBlock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bonus-block\",\n      style: {\n        left: `${bonusBlock.x - cameraX}px`,\n        top: `${bonusBlock.y}px`,\n        width: `${bonusBlock.width}px`,\n        height: `${bonusBlock.height}px`,\n        backgroundImage: `url(${bonusImage})`,\n        display: bonusBlock.used ? 'none' : 'block' // Hide if used\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"fhoXdt9wV0d672p2DXvzXSqiPig=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImage","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","bonusBlocks","setBonusBlocks","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","generateBlock","lastBlockType","type","x","width","height","Math","random","generateBonusBlock","existingBlocks","valid","newBonusBlock","maxAttempts","attempts","potentialX","floor","nearRedBlock","some","block","abs","y","used","blocks","setBlocks","initialBlocks","i","push","newBlock","initialBonusBlocks","bonusBlock","gameLoop","setInterval","prevLeft","potentialNewPos","gameWidth","current","clientWidth","lastBlock","length","prevBlocks","_prevBlocks","prevBonus","potentialBonus","duckLeft","duckRight","duckBottom","blockLeft","blockRight","isOnRedBlock","has","triggerMCQ","forEach","index","blockBottom","triggerBonusMCQ","maxLeft","min","clearInterval","className","ref","children","map","style","left","fileName","_jsxFileName","lineNumber","columnNumber","top","backgroundImage","display","transform","transition","questionData","onAnswer","handleAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImage from '../assets/bonus.png'; // Import the bonus block image\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n  const [bonusBlocks, setBonusBlocks] = useState([]); // State for bonus blocks\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n\r\n  // Helper function to generate blocks ensuring no two reds in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'red') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      return {\r\n        type: Math.random() < 0.3 ? 'red' : 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // Enhanced Helper function to generate bonus blocks\r\n  const generateBonusBlock = (existingBlocks) => {\r\n    let valid = false;\r\n    let newBonusBlock = null;\r\n    const maxAttempts = 100; // To prevent infinite loops\r\n\r\n    let attempts = 0;\r\n    while (!valid && attempts < maxAttempts) {\r\n      attempts += 1;\r\n      const potentialX = Math.floor(Math.random() * 50) * blockWidth + 600; // Start after first 6 blocks (600px)\r\n      \r\n      // Ensure bonus block is not within the initial 600px and not overlapping any red blocks\r\n      const nearRedBlock = existingBlocks.some(block => {\r\n        return Math.abs(block.x - potentialX) < blockWidth * 2; // At least 2 blocks away from any red block\r\n      });\r\n\r\n      if (!nearRedBlock) {\r\n        newBonusBlock = {\r\n          x: potentialX, // Position bonus block further ahead\r\n          y: 100, // Height above the platform\r\n          width: blockWidth,\r\n          height: 50,\r\n          used: false, // Track if the block has been used\r\n        };\r\n        valid = true;\r\n      }\r\n    }\r\n\r\n    return newBonusBlock;\r\n  };\r\n\r\n  // 1. Initial Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // Initialize and manage bonus blocks ensuring they don't overlap with red blocks and are not in the initial area\r\n  useEffect(() => {\r\n    const initialBonusBlocks = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const bonusBlock = generateBonusBlock(blocks);\r\n      if (bonusBlock) {\r\n        initialBonusBlocks.push(bonusBlock);\r\n      }\r\n    }\r\n    setBonusBlocks(initialBonusBlocks);\r\n  }, [blocks]);\r\n\r\n  // ... [Rest of the code remains unchanged]\r\n\r\n  // 3. Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 10) { // Increased buffer\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generateBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n\r\n              // Optionally, add new bonus blocks as the game progresses\r\n              setBonusBlocks((prevBonus) => {\r\n                const potentialBonus = generateBonusBlock(blocks);\r\n                if (potentialBonus) {\r\n                  return [...prevBonus, potentialBonus];\r\n                }\r\n                return prevBonus;\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n          const duckBottom = 50; // Duckling's bottom position\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling is centrally on the red block\r\n            const isOnRedBlock =\r\n              duckLeft >= blockLeft + threshold &&\r\n              duckRight <= blockRight - threshold &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i);\r\n\r\n            if (isOnRedBlock) {\r\n              triggerMCQ(i);\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Check for bonus block collision\r\n          bonusBlocks.forEach((bonusBlock, index) => {\r\n            if (!bonusBlock.used && isJumping) {\r\n              const blockLeft = bonusBlock.x;\r\n              const blockRight = bonusBlock.x + bonusBlock.width;\r\n              const blockBottom = bonusBlock.y + bonusBlock.height;\r\n\r\n              if (\r\n                duckLeft >= blockLeft &&\r\n                duckRight <= blockRight &&\r\n                duckBottom <= blockBottom\r\n              ) {\r\n                triggerBonusMCQ(index);\r\n              }\r\n            }\r\n          });\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, bonusBlocks, isJumping]);\r\n\r\n  // ... [Rest of the code remains unchanged]\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      {bonusBlocks.map((bonusBlock, index) => (\r\n        <div\r\n          key={index}\r\n          className=\"bonus-block\"\r\n          style={{\r\n            left: `${bonusBlock.x - cameraX}px`,\r\n            top: `${bonusBlock.y}px`,\r\n            width: `${bonusBlock.width}px`,\r\n            height: `${bonusBlock.height}px`,\r\n            backgroundImage: `url(${bonusImage})`,\r\n            display: bonusBlock.used ? 'none' : 'block', // Hide if used\r\n          }}\r\n        />\r\n      ))}\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}