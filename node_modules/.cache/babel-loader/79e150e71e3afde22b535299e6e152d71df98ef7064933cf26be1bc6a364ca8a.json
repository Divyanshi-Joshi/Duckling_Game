{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins,\n  onGameOver // Callback to handle game over\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n\n  // Duckling position states\n  const [leftPosition, setLeftPosition] = useState(50); // Initial left position in px\n  const [isJumping, setIsJumping] = useState(false);\n  const [facingLeft, setFacingLeft] = useState(false); // To handle orientation\n  const [isPaused, setIsPaused] = useState(false); // Controls game pause\n\n  const forwardSpeed = 2; // Continuous forward movement speed\n  const moveSpeed = 5; // Pixels to move per interval\n  const jumpDuration = 600; // Total jump duration in ms\n\n  // MCQ Modal states\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [duckOnRed, setDuckOnRed] = useState(false);\n\n  // Track the last red block index where MCQ was triggered\n  const [lastRedBlockIndex, setLastRedBlockIndex] = useState(null);\n\n  // Key press state\n  const keysPressed = useRef({});\n\n  // Define block properties\n  const blockWidth = 80; // As per .block width in CSS\n  const platformY = 50; // Platform height in px\n\n  // Total blocks and block positions, memoized\n  const totalBlocks = 20; // Number of blocks on the platform\n  const blocks = useMemo(() => Array.from({\n    length: totalBlocks\n  }).map((_, index) => ({\n    type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\n    x: index * blockWidth,\n    y: 0,\n    // Platforms are at y=0 relative to game board\n    width: blockWidth,\n    height: platformY // Consistent with platform height\n  })), [blockWidth, platformY, totalBlocks]);\n  useEffect(() => {\n    // Key down handler\n    const handleKeyDown = e => {\n      keysPressed.current[e.code] = true;\n    };\n\n    // Key up handler\n    const handleKeyUp = e => {\n      keysPressed.current[e.code] = false;\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    // Game loop\n    const gameLoop = setInterval(() => {\n      if (!isPaused) {\n        // Continuous Forward Movement\n        setLeftPosition(prev => {\n          const newPos = prev + forwardSpeed;\n          const maxLeft = gameBoardRef.current.clientWidth - 50; // 50 is the duckling width\n          return Math.min(newPos, maxLeft);\n        });\n\n        // Optional: Handle Left and Right Movements if desired\n        if (keysPressed.current['ArrowLeft'] || keysPressed.current['KeyA']) {\n          setLeftPosition(prev => Math.max(prev - moveSpeed, 0));\n          setFacingLeft(true);\n        }\n        if (keysPressed.current['ArrowRight'] || keysPressed.current['KeyD']) {\n          setLeftPosition(prev => Math.min(prev + moveSpeed, gameBoardRef.current.clientWidth - 50));\n          setFacingLeft(false);\n        }\n\n        // Jump\n        if ((keysPressed.current['Space'] || keysPressed.current['Spacebar']) && !isJumping) {\n          setIsJumping(true);\n          // Automatically reset jumping state after jumpDuration\n          setTimeout(() => {\n            setIsJumping(false);\n          }, jumpDuration);\n        }\n\n        // Check for landing on red block only when not jumping\n        if (!isJumping) {\n          const duckCenter = leftPosition + 25; // Duck's center x position (50px width)\n          const duckBlockIndex = Math.floor(duckCenter / blockWidth);\n\n          // Ensure duckBlockIndex is within bounds\n          if (duckBlockIndex >= 0 && duckBlockIndex < totalBlocks && blocks[duckBlockIndex].type === 'red' && duckBlockIndex !== lastRedBlockIndex) {\n            triggerMCQ(duckBlockIndex);\n          }\n        }\n      }\n    }, 20); // Adjust game loop speed as needed\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n      clearInterval(gameLoop);\n    };\n  }, [isJumping, blocks, isPaused, forwardSpeed, moveSpeed, jumpDuration, blockWidth, totalBlocks, lastRedBlockIndex]); // Removed 'duckOnRed' from dependencies\n\n  const triggerMCQ = currentBlockIndex => {\n    // Select a random question\n    const randomIndex = Math.floor(Math.random() * questions.length);\n    setCurrentQuestion(questions[randomIndex]);\n    setShowMCQ(true);\n    setIsPaused(true); // Pause the game when MCQ is triggered\n    setLastRedBlockIndex(currentBlockIndex); // Update last handled red block\n    // No need to set 'duckOnRed' anymore\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10); // Increment score as desired\n      // Optionally, you can add a brief pause before resuming\n      setTimeout(() => {\n        setShowMCQ(false);\n        setIsPaused(false);\n      }, 500); // 500ms pause\n    } else {\n      setLives(prevLives => {\n        const newLives = prevLives - 1;\n        if (newLives <= 0) {\n          onGameOver(); // Trigger game over\n        }\n        return newLives;\n      });\n      resetDuckling();\n      setShowMCQ(false);\n      setIsPaused(false);\n      setLastRedBlockIndex(null); // Reset the last red block index\n    }\n  };\n  const resetDuckling = () => {\n    setLeftPosition(50); // Reset to starting position\n    // Optionally, reset other states or add effects\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x}px`\n          // Other styles are handled by CSS\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: `${isJumping ? 'jumping' : ''} ${facingLeft ? 'facing-left' : ''}`,\n      style: {\n        left: `${leftPosition}px`,\n        transform: isJumping ? 'translateY(-150px)' : 'translateY(0)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"vWxKoPHQE7csDlxY/HIGtiA4siE=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","onGameOver","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","facingLeft","setFacingLeft","isPaused","setIsPaused","forwardSpeed","moveSpeed","jumpDuration","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","duckOnRed","setDuckOnRed","lastRedBlockIndex","setLastRedBlockIndex","keysPressed","blockWidth","platformY","totalBlocks","blocks","Array","from","length","map","_","index","type","includes","x","y","width","height","handleKeyDown","e","current","code","handleKeyUp","window","addEventListener","gameLoop","setInterval","prev","newPos","maxLeft","clientWidth","Math","min","max","setTimeout","duckCenter","duckBlockIndex","floor","triggerMCQ","removeEventListener","clearInterval","currentBlockIndex","randomIndex","random","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","resetDuckling","className","ref","children","block","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions'; // Ensure this path is correct\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n  onGameOver, // Callback to handle game over\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n\r\n  // Duckling position states\r\n  const [leftPosition, setLeftPosition] = useState(50); // Initial left position in px\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [facingLeft, setFacingLeft] = useState(false); // To handle orientation\r\n  const [isPaused, setIsPaused] = useState(false); // Controls game pause\r\n\r\n  const forwardSpeed = 2; // Continuous forward movement speed\r\n  const moveSpeed = 5; // Pixels to move per interval\r\n  const jumpDuration = 600; // Total jump duration in ms\r\n\r\n  // MCQ Modal states\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [duckOnRed, setDuckOnRed] = useState(false);\r\n\r\n  // Track the last red block index where MCQ was triggered\r\n  const [lastRedBlockIndex, setLastRedBlockIndex] = useState(null);\r\n\r\n  // Key press state\r\n  const keysPressed = useRef({});\r\n\r\n  // Define block properties\r\n  const blockWidth = 80; // As per .block width in CSS\r\n  const platformY = 50; // Platform height in px\r\n\r\n  // Total blocks and block positions, memoized\r\n  const totalBlocks = 20; // Number of blocks on the platform\r\n  const blocks = useMemo(\r\n    () =>\r\n      Array.from({ length: totalBlocks }).map((_, index) => ({\r\n        type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\r\n        x: index * blockWidth,\r\n        y: 0, // Platforms are at y=0 relative to game board\r\n        width: blockWidth,\r\n        height: platformY, // Consistent with platform height\r\n      })),\r\n    [blockWidth, platformY, totalBlocks]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Key down handler\r\n    const handleKeyDown = (e) => {\r\n      keysPressed.current[e.code] = true;\r\n    };\r\n\r\n    // Key up handler\r\n    const handleKeyUp = (e) => {\r\n      keysPressed.current[e.code] = false;\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    window.addEventListener('keyup', handleKeyUp);\r\n\r\n    // Game loop\r\n    const gameLoop = setInterval(() => {\r\n      if (!isPaused) {\r\n        // Continuous Forward Movement\r\n        setLeftPosition((prev) => {\r\n          const newPos = prev + forwardSpeed;\r\n          const maxLeft = gameBoardRef.current.clientWidth - 50; // 50 is the duckling width\r\n          return Math.min(newPos, maxLeft);\r\n        });\r\n\r\n        // Optional: Handle Left and Right Movements if desired\r\n        if (keysPressed.current['ArrowLeft'] || keysPressed.current['KeyA']) {\r\n          setLeftPosition((prev) => Math.max(prev - moveSpeed, 0));\r\n          setFacingLeft(true);\r\n        }\r\n\r\n        if (keysPressed.current['ArrowRight'] || keysPressed.current['KeyD']) {\r\n          setLeftPosition((prev) =>\r\n            Math.min(prev + moveSpeed, gameBoardRef.current.clientWidth - 50)\r\n          );\r\n          setFacingLeft(false);\r\n        }\r\n\r\n        // Jump\r\n        if (\r\n          (keysPressed.current['Space'] || keysPressed.current['Spacebar']) &&\r\n          !isJumping\r\n        ) {\r\n          setIsJumping(true);\r\n          // Automatically reset jumping state after jumpDuration\r\n          setTimeout(() => {\r\n            setIsJumping(false);\r\n          }, jumpDuration);\r\n        }\r\n\r\n        // Check for landing on red block only when not jumping\r\n        if (!isJumping) {\r\n          const duckCenter = leftPosition + 25; // Duck's center x position (50px width)\r\n          const duckBlockIndex = Math.floor(duckCenter / blockWidth);\r\n\r\n          // Ensure duckBlockIndex is within bounds\r\n          if (\r\n            duckBlockIndex >= 0 &&\r\n            duckBlockIndex < totalBlocks &&\r\n            blocks[duckBlockIndex].type === 'red' &&\r\n            duckBlockIndex !== lastRedBlockIndex\r\n          ) {\r\n            triggerMCQ(duckBlockIndex);\r\n          }\r\n        }\r\n      }\r\n    }, 20); // Adjust game loop speed as needed\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n      clearInterval(gameLoop);\r\n    };\r\n  }, [\r\n    isJumping,\r\n    blocks,\r\n    isPaused,\r\n    forwardSpeed,\r\n    moveSpeed,\r\n    jumpDuration,\r\n    blockWidth,\r\n    totalBlocks,\r\n    lastRedBlockIndex,\r\n  ]); // Removed 'duckOnRed' from dependencies\r\n\r\n  const triggerMCQ = (currentBlockIndex) => {\r\n    // Select a random question\r\n    const randomIndex = Math.floor(Math.random() * questions.length);\r\n    setCurrentQuestion(questions[randomIndex]);\r\n    setShowMCQ(true);\r\n    setIsPaused(true); // Pause the game when MCQ is triggered\r\n    setLastRedBlockIndex(currentBlockIndex); // Update last handled red block\r\n    // No need to set 'duckOnRed' anymore\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10); // Increment score as desired\r\n      // Optionally, you can add a brief pause before resuming\r\n      setTimeout(() => {\r\n        setShowMCQ(false);\r\n        setIsPaused(false);\r\n      }, 500); // 500ms pause\r\n    } else {\r\n      setLives((prevLives) => {\r\n        const newLives = prevLives - 1;\r\n        if (newLives <= 0) {\r\n          onGameOver(); // Trigger game over\r\n        }\r\n        return newLives;\r\n      });\r\n      resetDuckling();\r\n      setShowMCQ(false);\r\n      setIsPaused(false);\r\n      setLastRedBlockIndex(null); // Reset the last red block index\r\n    }\r\n  };\r\n\r\n  const resetDuckling = () => {\r\n    setLeftPosition(50); // Reset to starting position\r\n    // Optionally, reset other states or add effects\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      {/* Platforms */}\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x}px`,\r\n              // Other styles are handled by CSS\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      {/* Duckling */}\r\n      <Duckling\r\n        className={`${isJumping ? 'jumping' : ''} ${facingLeft ? 'facing-left' : ''}`}\r\n        style={{\r\n          left: `${leftPosition}px`,\r\n          transform: isJumping ? 'translateY(-150px)' : 'translateY(0)',\r\n        }}\r\n      />\r\n      {/* MCQ Modal */}\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}