{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImage from '../assets/bonus.png'; // Import the bonus block image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const [bonusBlocks, setBonusBlocks] = useState([]); // State for bonus blocks\n\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n\n  // Helper function to generate blocks ensuring no two reds in a row\n  const generateBlock = lastBlockType => {\n    if (lastBlockType === 'red') {\n      return {\n        type: 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      return {\n        type: Math.random() < 0.3 ? 'red' : 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // Enhanced Helper function to generate bonus blocks\n  const generateBonusBlock = existingBlocks => {\n    let valid = false;\n    let newBonusBlock = null;\n    const maxAttempts = 100; // To prevent infinite loops\n\n    let attempts = 0;\n    while (!valid && attempts < maxAttempts) {\n      attempts += 1;\n      // Generate potentialX within a closer range to prevent early appearance\n      const randomOffset = Math.floor(Math.random() * 20) * blockWidth; // Up to 2000px ahead\n      const lastBlock = existingBlocks[existingBlocks.length - 1];\n      const potentialX = lastBlock.x + blockWidth + randomOffset;\n\n      // Ensure bonus block is not overlapping any red blocks\n      const nearRedBlock = existingBlocks.some(block => {\n        if (block.type !== 'red') return false;\n        return Math.abs(block.x - potentialX) < blockWidth * 2;\n      });\n      if (!nearRedBlock) {\n        newBonusBlock = {\n          x: potentialX,\n          // Position bonus block further ahead\n          y: 100,\n          // Height above the platform\n          width: blockWidth,\n          height: 50\n          // Removed 'used' flag to keep the bonus block visible permanently\n        };\n        valid = true;\n      }\n    }\n    return newBonusBlock;\n  };\n\n  // 1. Initial Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // 2. Initialize and manage bonus blocks ensuring they don't overlap with red blocks and are not in the initial area\n  useEffect(() => {\n    const initialBonusBlocks = [];\n    for (let i = 0; i < 3; i++) {\n      const bonusBlock = generateBonusBlock(blocks);\n      if (bonusBlock) {\n        initialBonusBlocks.push(bonusBlock);\n      }\n    }\n    setBonusBlocks(initialBonusBlocks);\n  }, [blocks]);\n\n  // 3. Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // 4. Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 10) {\n              // Increased buffer\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generateBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n\n              // Add new bonus blocks as the game progresses\n              setBonusBlocks(prevBonus => {\n                const potentialBonus = generateBonusBlock(blocks);\n                if (potentialBonus) {\n                  return [...prevBonus, potentialBonus];\n                }\n                return prevBonus;\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n          const duckBottom = 50; // Duckling's bottom position\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling is centrally on the red block\n            const isOnRedBlock = duckLeft >= blockLeft + threshold && duckRight <= blockRight - threshold && block.type === 'red' && !answeredBlocks.has(i);\n            if (isOnRedBlock) {\n              triggerMCQ(i);\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Check for bonus block collision\n          bonusBlocks.forEach((bonusBlock, index) => {\n            // BONUS: Ensure the duck is on or above the bonus block\n            const blockLeft = bonusBlock.x;\n            const blockRight = bonusBlock.x + bonusBlock.width;\n            const blockTop = bonusBlock.y;\n\n            // Calculate duck's vertical position\n            const duckTop = duckBottom + ducklingHeight;\n            if (duckLeft < blockRight && duckRight > blockLeft && duckTop >= blockTop - ducklingHeight / 2 &&\n            // Adjust as per game's physics\n            duckBottom <= blockTop + bonusBlock.height) {\n              triggerBonusMCQ(index);\n            }\n          });\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, bonusBlocks, isJumping]);\n\n  // 5. Jump Function\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n\n  // 6. Trigger MCQ for Red Blocks\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n\n  // 7. Trigger Bonus MCQ for Bonus Blocks\n  const triggerBonusMCQ = bonusBlockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    // Removed the 'used' flag update to keep the bonus block visible\n  };\n\n  // 8. Handle Answer Function\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      // Deduct a life\n      setLives(prevLives => {\n        const newLives = prevLives - 1;\n        if (newLives <= 0) {\n          alert('Game Over!');\n          resetGame(); // Reset the game entirely\n          return 3; // Reset lives to initial value after game over\n        }\n        return newLives;\n      });\n\n      // Reset the duckling's position to the beginning\n      setLeftPosition(50);\n      setCameraX(0);\n\n      // Optionally, reset answered blocks to allow revisiting questions\n      setAnsweredBlocks(new Set());\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n\n  // 9. Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two reds in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generateBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n    setBonusBlocks(() => {\n      const initialBonusBlocks = [];\n      for (let i = 0; i < 3; i++) {\n        const bonusBlock = generateBonusBlock(blocks);\n        if (bonusBlock) {\n          initialBonusBlocks.push(bonusBlock);\n        }\n      }\n      return initialBonusBlocks;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), bonusBlocks.map((bonusBlock, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bonus-block\",\n      style: {\n        left: `${bonusBlock.x - cameraX}px`,\n        top: `${bonusBlock.y}px`,\n        width: `${bonusBlock.width}px`,\n        height: `${bonusBlock.height}px`,\n        backgroundImage: `url(${bonusImage})`\n        // Removed display condition to keep the bonus block visible permanently\n        // display: bonusBlock.used ? 'none' : 'block',\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"7FDCko5/hDY/GIn6U6ahqqJqfDs=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImage","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","bonusBlocks","setBonusBlocks","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","generateBlock","lastBlockType","type","x","width","height","Math","random","generateBonusBlock","existingBlocks","valid","newBonusBlock","maxAttempts","attempts","randomOffset","floor","lastBlock","length","potentialX","nearRedBlock","some","block","abs","y","blocks","setBlocks","initialBlocks","i","push","newBlock","initialBonusBlocks","bonusBlock","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prevLeft","potentialNewPos","gameWidth","current","clientWidth","prevBlocks","_prevBlocks","prevBonus","potentialBonus","duckLeft","duckRight","duckBottom","blockLeft","blockRight","isOnRedBlock","has","triggerMCQ","forEach","index","blockTop","duckTop","triggerBonusMCQ","maxLeft","min","clearInterval","setTimeout","blockIndex","prev","add","bonusBlockIndex","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","resetGame","className","ref","children","map","style","left","fileName","_jsxFileName","lineNumber","columnNumber","top","backgroundImage","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImage from '../assets/bonus.png'; // Import the bonus block image\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n  const [bonusBlocks, setBonusBlocks] = useState([]); // State for bonus blocks\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n\r\n  // Helper function to generate blocks ensuring no two reds in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'red') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      return {\r\n        type: Math.random() < 0.3 ? 'red' : 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // Enhanced Helper function to generate bonus blocks\r\n  const generateBonusBlock = (existingBlocks) => {\r\n    let valid = false;\r\n    let newBonusBlock = null;\r\n    const maxAttempts = 100; // To prevent infinite loops\r\n\r\n    let attempts = 0;\r\n    while (!valid && attempts < maxAttempts) {\r\n      attempts += 1;\r\n      // Generate potentialX within a closer range to prevent early appearance\r\n      const randomOffset = Math.floor(Math.random() * 20) * blockWidth; // Up to 2000px ahead\r\n      const lastBlock = existingBlocks[existingBlocks.length - 1];\r\n      const potentialX = lastBlock.x + blockWidth + randomOffset;\r\n\r\n      // Ensure bonus block is not overlapping any red blocks\r\n      const nearRedBlock = existingBlocks.some((block) => {\r\n        if (block.type !== 'red') return false;\r\n        return Math.abs(block.x - potentialX) < blockWidth * 2;\r\n      });\r\n\r\n      if (!nearRedBlock) {\r\n        newBonusBlock = {\r\n          x: potentialX, // Position bonus block further ahead\r\n          y: 100, // Height above the platform\r\n          width: blockWidth,\r\n          height: 50,\r\n          // Removed 'used' flag to keep the bonus block visible permanently\r\n        };\r\n        valid = true;\r\n      }\r\n    }\r\n\r\n    return newBonusBlock;\r\n  };\r\n\r\n  // 1. Initial Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // 2. Initialize and manage bonus blocks ensuring they don't overlap with red blocks and are not in the initial area\r\n  useEffect(() => {\r\n    const initialBonusBlocks = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      const bonusBlock = generateBonusBlock(blocks);\r\n      if (bonusBlock) {\r\n        initialBonusBlocks.push(bonusBlock);\r\n      }\r\n    }\r\n    setBonusBlocks(initialBonusBlocks);\r\n  }, [blocks]);\r\n\r\n  // 3. Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // 4. Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 10) { // Increased buffer\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generateBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n\r\n              // Add new bonus blocks as the game progresses\r\n              setBonusBlocks((prevBonus) => {\r\n                const potentialBonus = generateBonusBlock(blocks);\r\n                if (potentialBonus) {\r\n                  return [...prevBonus, potentialBonus];\r\n                }\r\n                return prevBonus;\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n          const duckBottom = 50; // Duckling's bottom position\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling is centrally on the red block\r\n            const isOnRedBlock =\r\n              duckLeft >= blockLeft + threshold &&\r\n              duckRight <= blockRight - threshold &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i);\r\n\r\n            if (isOnRedBlock) {\r\n              triggerMCQ(i);\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Check for bonus block collision\r\n          bonusBlocks.forEach((bonusBlock, index) => {\r\n            // BONUS: Ensure the duck is on or above the bonus block\r\n            const blockLeft = bonusBlock.x;\r\n            const blockRight = bonusBlock.x + bonusBlock.width;\r\n            const blockTop = bonusBlock.y;\r\n\r\n            // Calculate duck's vertical position\r\n            const duckTop = duckBottom + ducklingHeight;\r\n\r\n            if (\r\n              duckLeft < blockRight &&\r\n              duckRight > blockLeft &&\r\n              duckTop >= blockTop - ducklingHeight / 2 && // Adjust as per game's physics\r\n              duckBottom <= blockTop + bonusBlock.height\r\n            ) {\r\n              triggerBonusMCQ(index);\r\n            }\r\n          });\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX, bonusBlocks, isJumping]);\r\n\r\n  // 5. Jump Function\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  // 6. Trigger MCQ for Red Blocks\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  // 7. Trigger Bonus MCQ for Bonus Blocks\r\n  const triggerBonusMCQ = (bonusBlockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    // Removed the 'used' flag update to keep the bonus block visible\r\n  };\r\n\r\n  // 8. Handle Answer Function\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      // Deduct a life\r\n      setLives((prevLives) => {\r\n        const newLives = prevLives - 1;\r\n        if (newLives <= 0) {\r\n          alert('Game Over!');\r\n          resetGame(); // Reset the game entirely\r\n          return 3; // Reset lives to initial value after game over\r\n        }\r\n        return newLives;\r\n      });\r\n\r\n      // Reset the duckling's position to the beginning\r\n      setLeftPosition(50);\r\n      setCameraX(0);\r\n\r\n      // Optionally, reset answered blocks to allow revisiting questions\r\n      setAnsweredBlocks(new Set());\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  // 9. Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two reds in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generateBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n    setBonusBlocks(() => {\r\n      const initialBonusBlocks = [];\r\n      for (let i = 0; i < 3; i++) {\r\n        const bonusBlock = generateBonusBlock(blocks);\r\n        if (bonusBlock) {\r\n          initialBonusBlocks.push(bonusBlock);\r\n        }\r\n      }\r\n      return initialBonusBlocks;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      {bonusBlocks.map((bonusBlock, index) => (\r\n        <div\r\n          key={index}\r\n          className=\"bonus-block\"\r\n          style={{\r\n            left: `${bonusBlock.x - cameraX}px`,\r\n            top: `${bonusBlock.y}px`,\r\n            width: `${bonusBlock.width}px`,\r\n            height: `${bonusBlock.height}px`,\r\n            backgroundImage: `url(${bonusImage})`,\r\n            // Removed display condition to keep the bonus block visible permanently\r\n            // display: bonusBlock.used ? 'none' : 'block',\r\n          }}\r\n        />\r\n      ))}\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}