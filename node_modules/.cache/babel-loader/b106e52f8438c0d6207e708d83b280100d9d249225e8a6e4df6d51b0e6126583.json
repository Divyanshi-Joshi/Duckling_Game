{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameEngine.js\",\n  _s = $RefreshSig$();\n// src/components/GameEngine.js\nimport React, { useRef, useState, useEffect } from 'react';\nimport { GameEngine as ReGameEngine } from 'react-game-engine';\nimport Matter from 'matter-js';\nimport HUD from './HUD';\nimport QuestionModal from './QuestionModal';\nimport Duckling from '../entities/Duckling';\nimport Platform from '../entities/Platform';\nimport Obstacle from '../entities/Obstacle';\nimport MovementSystem from '../systems/MovementSystem';\nimport InputSystem from '../systems/InputSystem';\nimport CollisionSystem from '../systems/CollisionSystem';\nimport './GameEngine.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameEngineComponent = () => {\n  _s();\n  const [lives, setLives] = useState(3);\n  const [coins, setCoins] = useState(0);\n  const [score, setScore] = useState(0);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [question, setQuestion] = useState(null);\n  const gameEngineRef = useRef(null);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      // Dispatch keydown event to the game engine\n      if (gameEngineRef.current) {\n        gameEngineRef.current.dispatch({\n          type: 'keydown',\n          key: e.key\n        });\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, []);\n  const handleQuestion = type => {\n    // Define questions based on the type of interaction\n    let sampleQuestion;\n    if (type === 'smash') {\n      sampleQuestion = {\n        question: 'What is the capital of France?',\n        options: [{\n          text: 'Paris',\n          isCorrect: true\n        }, {\n          text: 'London',\n          isCorrect: false\n        }, {\n          text: 'Berlin',\n          isCorrect: false\n        }, {\n          text: 'Madrid',\n          isCorrect: false\n        }]\n      };\n    } else if (type === 'obstacle') {\n      sampleQuestion = {\n        question: 'What is 5 + 7?',\n        options: [{\n          text: '10',\n          isCorrect: false\n        }, {\n          text: '11',\n          isCorrect: false\n        }, {\n          text: '12',\n          isCorrect: true\n        }, {\n          text: '13',\n          isCorrect: false\n        }]\n      };\n    }\n    setQuestion(sampleQuestion);\n    setModalVisible(true);\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      if (question.question.includes('capital')) {\n        // Example: Earning a coin for correct geography question\n        setCoins(prev => prev + 1);\n        setScore(prev => prev + 10);\n      } else {\n        // Earning a coin for correct math question\n        setCoins(prev => prev + 1);\n        setScore(prev => prev + 10);\n      }\n    } else {\n      setLives(prev => prev - 1);\n      if (lives - 1 <= 0) handleGameOver();\n    }\n    setModalVisible(false);\n  };\n  const handleGameOver = () => {\n    alert('Game Over!');\n    // Optionally, reset the game or navigate to a game over screen\n    window.location.reload();\n  };\n  const entities = {\n    duckling: Duckling(),\n    platform1: Platform(300, 500, 200, 20, true),\n    platform2: Platform(600, 400, 200, 20, false),\n    obstacle1: Obstacle(500, 350),\n    obstacle2: Obstacle(800, 300),\n    physics: {\n      engine: Matter.Engine.create(),\n      world: Matter.World.create()\n    },\n    dispatch: handleQuestion\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(HUD, {\n      lives: lives,\n      coins: coins,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReGameEngine, {\n      ref: gameEngineRef,\n      systems: [InputSystem, MovementSystem, CollisionSystem],\n      entities: entities,\n      style: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%'\n      },\n      renderer: null,\n      onEvent: e => {\n        switch (e.type) {\n          case 'show-question':\n            handleQuestion(e.target);\n            break;\n          default:\n            break;\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionModal, {\n      visible: modalVisible,\n      question: question === null || question === void 0 ? void 0 : question.question,\n      options: (question === null || question === void 0 ? void 0 : question.options) || [],\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(GameEngineComponent, \"c7ggHXVvoFIDtTJokT/Tpn4gr3k=\");\n_c = GameEngineComponent;\nexport default GameEngineComponent;\nvar _c;\n$RefreshReg$(_c, \"GameEngineComponent\");","map":{"version":3,"names":["React","useRef","useState","useEffect","GameEngine","ReGameEngine","Matter","HUD","QuestionModal","Duckling","Platform","Obstacle","MovementSystem","InputSystem","CollisionSystem","jsxDEV","_jsxDEV","GameEngineComponent","_s","lives","setLives","coins","setCoins","score","setScore","modalVisible","setModalVisible","question","setQuestion","gameEngineRef","handleKeyDown","e","current","dispatch","type","key","window","addEventListener","removeEventListener","handleQuestion","sampleQuestion","options","text","isCorrect","handleAnswer","includes","prev","handleGameOver","alert","location","reload","entities","duckling","platform1","platform2","obstacle1","obstacle2","physics","engine","Engine","create","world","World","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","systems","style","position","width","height","renderer","onEvent","target","visible","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameEngine.js"],"sourcesContent":["// src/components/GameEngine.js\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { GameEngine as ReGameEngine } from 'react-game-engine';\r\nimport Matter from 'matter-js';\r\nimport HUD from './HUD';\r\nimport QuestionModal from './QuestionModal';\r\nimport Duckling from '../entities/Duckling';\r\nimport Platform from '../entities/Platform';\r\nimport Obstacle from '../entities/Obstacle';\r\nimport MovementSystem from '../systems/MovementSystem';\r\nimport InputSystem from '../systems/InputSystem';\r\nimport CollisionSystem from '../systems/CollisionSystem';\r\nimport './GameEngine.css';\r\n\r\nconst GameEngineComponent = () => {\r\n  const [lives, setLives] = useState(3);\r\n  const [coins, setCoins] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [question, setQuestion] = useState(null);\r\n\r\n  const gameEngineRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      // Dispatch keydown event to the game engine\r\n      if (gameEngineRef.current) {\r\n        gameEngineRef.current.dispatch({ type: 'keydown', key: e.key });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, []);\r\n\r\n  const handleQuestion = (type) => {\r\n    // Define questions based on the type of interaction\r\n    let sampleQuestion;\r\n    if (type === 'smash') {\r\n      sampleQuestion = {\r\n        question: 'What is the capital of France?',\r\n        options: [\r\n          { text: 'Paris', isCorrect: true },\r\n          { text: 'London', isCorrect: false },\r\n          { text: 'Berlin', isCorrect: false },\r\n          { text: 'Madrid', isCorrect: false },\r\n        ],\r\n      };\r\n    } else if (type === 'obstacle') {\r\n      sampleQuestion = {\r\n        question: 'What is 5 + 7?',\r\n        options: [\r\n          { text: '10', isCorrect: false },\r\n          { text: '11', isCorrect: false },\r\n          { text: '12', isCorrect: true },\r\n          { text: '13', isCorrect: false },\r\n        ],\r\n      };\r\n    }\r\n\r\n    setQuestion(sampleQuestion);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      if (question.question.includes('capital')) {\r\n        // Example: Earning a coin for correct geography question\r\n        setCoins((prev) => prev + 1);\r\n        setScore((prev) => prev + 10);\r\n      } else {\r\n        // Earning a coin for correct math question\r\n        setCoins((prev) => prev + 1);\r\n        setScore((prev) => prev + 10);\r\n      }\r\n    } else {\r\n      setLives((prev) => prev - 1);\r\n      if (lives - 1 <= 0) handleGameOver();\r\n    }\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleGameOver = () => {\r\n    alert('Game Over!');\r\n    // Optionally, reset the game or navigate to a game over screen\r\n    window.location.reload();\r\n  };\r\n\r\n  const entities = {\r\n    duckling: Duckling(),\r\n    platform1: Platform(300, 500, 200, 20, true),\r\n    platform2: Platform(600, 400, 200, 20, false),\r\n    obstacle1: Obstacle(500, 350),\r\n    obstacle2: Obstacle(800, 300),\r\n    physics: {\r\n      engine: Matter.Engine.create(),\r\n      world: Matter.World.create(),\r\n    },\r\n    dispatch: handleQuestion,\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <HUD lives={lives} coins={coins} score={score} />\r\n      <ReGameEngine\r\n        ref={gameEngineRef}\r\n        systems={[InputSystem, MovementSystem, CollisionSystem]}\r\n        entities={entities}\r\n        style={{ position: 'absolute', width: '100%', height: '100%' }}\r\n        renderer={null}\r\n        onEvent={(e) => {\r\n          switch (e.type) {\r\n            case 'show-question':\r\n              handleQuestion(e.target);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }}\r\n      />\r\n      <QuestionModal\r\n        visible={modalVisible}\r\n        question={question?.question}\r\n        options={question?.options || []}\r\n        onAnswer={handleAnswer}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameEngineComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}