{"ast":null,"code":"// src/systems/CollisionSystem.js\nimport Matter from 'matter-js';\nconst CollisionSystem = (entities, {\n  time\n}) => {\n  let engine = entities.physics.engine;\n  let duckling = entities.duckling;\n\n  // Set up collision event listener\n  Matter.Events.on(engine, 'collisionStart', event => {\n    event.pairs.forEach(pair => {\n      const {\n        bodyA,\n        bodyB\n      } = pair;\n\n      // Check if duckling is involved in the collision\n      if (bodyA === duckling.body || bodyB === duckling.body) {\n        const otherBody = bodyA === duckling.body ? bodyB : bodyA;\n        if (otherBody.label === 'obstacle') {\n          // Dispatch event to show obstacle question\n          entities.dispatch({\n            type: 'show-question',\n            target: 'obstacle'\n          });\n        }\n        if (otherBody.label === 'filled') {\n          // Dispatch event to show smash question and remove the block\n          entities.dispatch({\n            type: 'show-question',\n            target: 'smash'\n          });\n          Matter.World.remove(engine.world, otherBody);\n        }\n      }\n    });\n  });\n  return entities;\n};\n_c = CollisionSystem;\nexport default CollisionSystem;\nvar _c;\n$RefreshReg$(_c, \"CollisionSystem\");","map":{"version":3,"names":["Matter","CollisionSystem","entities","time","engine","physics","duckling","Events","on","event","pairs","forEach","pair","bodyA","bodyB","body","otherBody","label","dispatch","type","target","World","remove","world","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/systems/CollisionSystem.js"],"sourcesContent":["// src/systems/CollisionSystem.js\r\nimport Matter from 'matter-js';\r\n\r\nconst CollisionSystem = (entities, { time }) => {\r\n  let engine = entities.physics.engine;\r\n  let duckling = entities.duckling;\r\n\r\n  // Set up collision event listener\r\n  Matter.Events.on(engine, 'collisionStart', (event) => {\r\n    event.pairs.forEach((pair) => {\r\n      const { bodyA, bodyB } = pair;\r\n\r\n      // Check if duckling is involved in the collision\r\n      if (bodyA === duckling.body || bodyB === duckling.body) {\r\n        const otherBody = bodyA === duckling.body ? bodyB : bodyA;\r\n\r\n        if (otherBody.label === 'obstacle') {\r\n          // Dispatch event to show obstacle question\r\n          entities.dispatch({ type: 'show-question', target: 'obstacle' });\r\n        }\r\n\r\n        if (otherBody.label === 'filled') {\r\n          // Dispatch event to show smash question and remove the block\r\n          entities.dispatch({ type: 'show-question', target: 'smash' });\r\n          Matter.World.remove(engine.world, otherBody);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return entities;\r\n};\r\n\r\nexport default CollisionSystem;"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,WAAW;AAE9B,MAAMC,eAAe,GAAGA,CAACC,QAAQ,EAAE;EAAEC;AAAK,CAAC,KAAK;EAC9C,IAAIC,MAAM,GAAGF,QAAQ,CAACG,OAAO,CAACD,MAAM;EACpC,IAAIE,QAAQ,GAAGJ,QAAQ,CAACI,QAAQ;;EAEhC;EACAN,MAAM,CAACO,MAAM,CAACC,EAAE,CAACJ,MAAM,EAAE,gBAAgB,EAAGK,KAAK,IAAK;IACpDA,KAAK,CAACC,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAK;MAC5B,MAAM;QAAEC,KAAK;QAAEC;MAAM,CAAC,GAAGF,IAAI;;MAE7B;MACA,IAAIC,KAAK,KAAKP,QAAQ,CAACS,IAAI,IAAID,KAAK,KAAKR,QAAQ,CAACS,IAAI,EAAE;QACtD,MAAMC,SAAS,GAAGH,KAAK,KAAKP,QAAQ,CAACS,IAAI,GAAGD,KAAK,GAAGD,KAAK;QAEzD,IAAIG,SAAS,CAACC,KAAK,KAAK,UAAU,EAAE;UAClC;UACAf,QAAQ,CAACgB,QAAQ,CAAC;YAAEC,IAAI,EAAE,eAAe;YAAEC,MAAM,EAAE;UAAW,CAAC,CAAC;QAClE;QAEA,IAAIJ,SAAS,CAACC,KAAK,KAAK,QAAQ,EAAE;UAChC;UACAf,QAAQ,CAACgB,QAAQ,CAAC;YAAEC,IAAI,EAAE,eAAe;YAAEC,MAAM,EAAE;UAAQ,CAAC,CAAC;UAC7DpB,MAAM,CAACqB,KAAK,CAACC,MAAM,CAAClB,MAAM,CAACmB,KAAK,EAAEP,SAAS,CAAC;QAC9C;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOd,QAAQ;AACjB,CAAC;AAACsB,EAAA,GA5BIvB,eAAe;AA8BrB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}