{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImg from '../assets/bonus.png'; // Import the bonus image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const [bonusBlocks, setBonusBlocks] = useState([]);\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n  const bonusInterval = 5000; // Time interval (ms) to generate bonus blocks\n\n  // Helper function to generate platform blocks ensuring no two reds in a row\n  const generateBlock = lastBlockType => {\n    if (lastBlockType === 'red') {\n      return {\n        type: 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      return {\n        type: Math.random() < 0.3 ? 'red' : 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // Initial Platform Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // Function to Generate Bonus Blocks\n  const generateBonusBlock = () => {\n    const lastBlock = blocks[blocks.length - 1];\n    const gameWidth = gameBoardRef.current.clientWidth;\n    const newBonusX = lastBlock.x + blockWidth * 10 + Math.random() * blockWidth * 5;\n    setBonusBlocks(prevBonusBlocks => [...prevBonusBlocks, {\n      id: Date.now(),\n      x: newBonusX,\n      y: jumpHeight + 50,\n      // Position it at jump height plus platform height\n      width: 50,\n      // Adjust based on bonus.png dimensions\n      height: 50\n    }]);\n\n    // Clean up old bonus blocks\n    setBonusBlocks(prevBonusBlocks => prevBonusBlocks.filter(block => block.x - cameraX < gameWidth + blockWidth * 10));\n  };\n\n  // Generate Bonus Blocks at Intervals\n  useEffect(() => {\n    if (!isPaused) {\n      const interval = setInterval(() => {\n        generateBonusBlock();\n      }, bonusInterval);\n      return () => clearInterval(interval);\n    }\n  }, [isPaused, blocks, cameraX]);\n\n  // Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 10) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generateBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all platform blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling is centrally on the red block\n            const isOnRedBlock = duckLeft >= blockLeft + threshold && duckRight <= blockRight - threshold && block.type === 'red' && !answeredBlocks.has(i);\n            if (isOnRedBlock) {\n              triggerMCQ(i, false); // false indicates it's not a bonus\n              return prevLeft; // Prevent moving into the red block\n            }\n          }\n\n          // Check collision with bonus blocks\n          for (let i = 0; i < bonusBlocks.length; i++) {\n            const bonus = bonusBlocks[i];\n            const bonusLeft = bonus.x;\n            const bonusRight = bonus.x + bonus.width;\n            const bonusBottom = bonus.y + bonus.height;\n\n            // Duck's top position when jumping\n            const duckTop = isJumping ? jumpHeight : 0; // Simplistic approach\n\n            // Collision detection (overlapping x and y)\n            const isColliding = duckRight >= bonusLeft && duckLeft <= bonusRight && duckTop <= bonusBottom && ducklingHeight >= bonus.y; // 50px is ducklingHeight\n\n            if (isColliding) {\n              triggerMCQ(bonus.id, true); // true indicates it's a bonus\n              // Remove the bonus block after collision\n              setBonusBlocks(prev => prev.filter(b => b.id !== bonus.id));\n              break; // Prevent multiple triggers in the same loop\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, bonusBlocks, answeredBlocks, ducklingWidth, cameraX, isJumping]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = (identifier, isBonus) => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion({\n      ...questions[Math.floor(Math.random() * questions.length)],\n      isBonus // Flag to indicate if this is a bonus question\n    });\n    if (!isBonus) {\n      // Only add to answeredBlocks if it's a platform block\n      setAnsweredBlocks(prev => new Set(prev).add(identifier));\n    }\n  };\n\n  // Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two reds in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generateBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setBonusBlocks([]); // Reset bonus blocks\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // Handle Answer Function\n  const handleAnswer = (isCorrect, isBonus) => {\n    if (isBonus) {\n      if (isCorrect) {\n        setCoins(prevCoins => prevCoins + 5); // Bonus coins\n        setScore(prevScore => prevScore + 20); // Bonus score\n      }\n      // No penalty for incorrect bonus answers\n    } else {\n      if (isCorrect) {\n        setCoins(prevCoins => prevCoins + 1);\n        setScore(prevScore => prevScore + 10);\n      } else {\n        // Deduct a life\n        setLives(prevLives => {\n          const newLives = prevLives - 1;\n          if (newLives <= 0) {\n            alert('Game Over!');\n            resetGame(); // Reset the game entirely\n            return 3; // Reset lives to initial value after game over\n          }\n          return newLives;\n        });\n\n        // Reset the duckling's position to the beginning\n        setLeftPosition(50);\n        setCameraX(0);\n\n        // Optionally, reset answered blocks to allow revisiting questions\n        setAnsweredBlocks(new Set());\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), bonusBlocks.map(bonus => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bonus-block\",\n      style: {\n        left: `${bonus.x - cameraX}px`,\n        bottom: `${bonus.y}px`,\n        width: `${bonus.width}px`,\n        height: `${bonus.height}px`,\n        backgroundImage: `url(${bonusImg})`,\n        backgroundSize: 'cover'\n      }\n    }, bonus.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: isCorrect => handleAnswer(isCorrect, currentQuestion.isBonus)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"7FDCko5/hDY/GIn6U6ahqqJqfDs=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImg","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","bonusBlocks","setBonusBlocks","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","bonusInterval","generateBlock","lastBlockType","type","x","width","height","Math","random","blocks","setBlocks","initialBlocks","i","push","newBlock","generateBonusBlock","lastBlock","length","gameWidth","current","clientWidth","newBonusX","prevBonusBlocks","id","Date","now","y","filter","block","interval","setInterval","clearInterval","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","prevLeft","potentialNewPos","prevBlocks","_prevBlocks","duckLeft","duckRight","blockLeft","blockRight","isOnRedBlock","has","triggerMCQ","bonus","bonusLeft","bonusRight","bonusBottom","duckTop","isColliding","prev","b","maxLeft","min","setTimeout","identifier","isBonus","floor","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","bottom","backgroundImage","backgroundSize","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImg from '../assets/bonus.png'; // Import the bonus image\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n  const [bonusBlocks, setBonusBlocks] = useState([]);\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n  const bonusInterval = 5000; // Time interval (ms) to generate bonus blocks\r\n\r\n  // Helper function to generate platform blocks ensuring no two reds in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'red') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      return {\r\n        type: Math.random() < 0.3 ? 'red' : 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // Initial Platform Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // Function to Generate Bonus Blocks\r\n  const generateBonusBlock = () => {\r\n    const lastBlock = blocks[blocks.length - 1];\r\n    const gameWidth = gameBoardRef.current.clientWidth;\r\n    const newBonusX = lastBlock.x + blockWidth * 10 + Math.random() * blockWidth * 5;\r\n\r\n    setBonusBlocks((prevBonusBlocks) => [\r\n      ...prevBonusBlocks,\r\n      {\r\n        id: Date.now(),\r\n        x: newBonusX,\r\n        y: jumpHeight + 50, // Position it at jump height plus platform height\r\n        width: 50, // Adjust based on bonus.png dimensions\r\n        height: 50,\r\n      },\r\n    ]);\r\n\r\n    // Clean up old bonus blocks\r\n    setBonusBlocks((prevBonusBlocks) =>\r\n      prevBonusBlocks.filter((block) => block.x - cameraX < gameWidth + blockWidth * 10)\r\n    );\r\n  };\r\n\r\n  // Generate Bonus Blocks at Intervals\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const interval = setInterval(() => {\r\n        generateBonusBlock();\r\n      }, bonusInterval);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isPaused, blocks, cameraX]);\r\n\r\n  // Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth * 10) {\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generateBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all platform blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling is centrally on the red block\r\n            const isOnRedBlock =\r\n              duckLeft >= blockLeft + threshold &&\r\n              duckRight <= blockRight - threshold &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i);\r\n\r\n            if (isOnRedBlock) {\r\n              triggerMCQ(i, false); // false indicates it's not a bonus\r\n              return prevLeft; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Check collision with bonus blocks\r\n          for (let i = 0; i < bonusBlocks.length; i++) {\r\n            const bonus = bonusBlocks[i];\r\n            const bonusLeft = bonus.x;\r\n            const bonusRight = bonus.x + bonus.width;\r\n            const bonusBottom = bonus.y + bonus.height;\r\n\r\n            // Duck's top position when jumping\r\n            const duckTop = isJumping ? jumpHeight : 0; // Simplistic approach\r\n\r\n            // Collision detection (overlapping x and y)\r\n            const isColliding =\r\n              duckRight >= bonusLeft &&\r\n              duckLeft <= bonusRight &&\r\n              duckTop <= bonusBottom &&\r\n              ducklingHeight >= bonus.y; // 50px is ducklingHeight\r\n\r\n            if (isColliding) {\r\n              triggerMCQ(bonus.id, true); // true indicates it's a bonus\r\n              // Remove the bonus block after collision\r\n              setBonusBlocks((prev) => prev.filter((b) => b.id !== bonus.id));\r\n              break; // Prevent multiple triggers in the same loop\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, bonusBlocks, answeredBlocks, ducklingWidth, cameraX, isJumping]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (identifier, isBonus) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion({\r\n      ...questions[Math.floor(Math.random() * questions.length)],\r\n      isBonus, // Flag to indicate if this is a bonus question\r\n    });\r\n    if (!isBonus) {\r\n      // Only add to answeredBlocks if it's a platform block\r\n      setAnsweredBlocks((prev) => new Set(prev).add(identifier));\r\n    }\r\n  };\r\n\r\n  // Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two reds in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generateBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setBonusBlocks([]); // Reset bonus blocks\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // Handle Answer Function\r\n  const handleAnswer = (isCorrect, isBonus) => {\r\n    if (isBonus) {\r\n      if (isCorrect) {\r\n        setCoins((prevCoins) => prevCoins + 5); // Bonus coins\r\n        setScore((prevScore) => prevScore + 20); // Bonus score\r\n      }\r\n      // No penalty for incorrect bonus answers\r\n    } else {\r\n      if (isCorrect) {\r\n        setCoins((prevCoins) => prevCoins + 1);\r\n        setScore((prevScore) => prevScore + 10);\r\n      } else {\r\n        // Deduct a life\r\n        setLives((prevLives) => {\r\n          const newLives = prevLives - 1;\r\n          if (newLives <= 0) {\r\n            alert('Game Over!');\r\n            resetGame(); // Reset the game entirely\r\n            return 3; // Reset lives to initial value after game over\r\n          }\r\n          return newLives;\r\n        });\r\n\r\n        // Reset the duckling's position to the beginning\r\n        setLeftPosition(50);\r\n        setCameraX(0);\r\n\r\n        // Optionally, reset answered blocks to allow revisiting questions\r\n        setAnsweredBlocks(new Set());\r\n      }\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      {/* Render Bonus Blocks */}\r\n      {bonusBlocks.map((bonus) => (\r\n        <div\r\n          key={bonus.id}\r\n          className=\"bonus-block\"\r\n          style={{\r\n            left: `${bonus.x - cameraX}px`,\r\n            bottom: `${bonus.y}px`,\r\n            width: `${bonus.width}px`,\r\n            height: `${bonus.height}px`,\r\n            backgroundImage: `url(${bonusImg})`,\r\n            backgroundSize: 'cover',\r\n          }}\r\n        />\r\n      ))}\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal\r\n          questionData={currentQuestion}\r\n          onAnswer={(isCorrect) => handleAnswer(isCorrect, currentQuestion.isBonus)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}