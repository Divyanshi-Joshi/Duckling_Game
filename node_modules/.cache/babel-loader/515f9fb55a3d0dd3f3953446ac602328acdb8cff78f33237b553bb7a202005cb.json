{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\MCQModal.js\",\n  _s = $RefreshSig$();\n// src/components/McqModal.js\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './MCQModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MCQModal = ({\n  questionData,\n  onAnswer\n}) => {\n  _s();\n  const {\n    question,\n    options,\n    correctOption\n  } = questionData;\n  const modalRef = useRef(null);\n  const firstButtonRef = useRef(null);\n  const [selected, setSelected] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n  useEffect(() => {\n    // Focus the first button when the modal opens\n    firstButtonRef.current.focus();\n\n    // Prevent scrolling on the background\n    document.body.style.overflow = 'hidden';\n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, []);\n  const handleOptionClick = selectedOption => {\n    setSelected(selectedOption);\n    const correct = selectedOption === correctOption;\n    setIsCorrect(correct);\n    onAnswer(correct);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Escape') {\n      // Optionally, handle closing the modal with the Escape key\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    onKeyDown: handleKeyDown,\n    ref: modalRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: options.map((opt, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOptionClick(opt),\n          ref: index === 0 ? firstButtonRef : null,\n          disabled: selected !== null,\n          className: selected ? opt === correctOption ? 'correct' : opt === selected ? 'incorrect' : '' : '',\n          children: opt\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(MCQModal, \"soLhMyJtW+WbuFWakv33tS6rV3c=\");\n_c = MCQModal;\nexport default MCQModal;\nvar _c;\n$RefreshReg$(_c, \"MCQModal\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","MCQModal","questionData","onAnswer","_s","question","options","correctOption","modalRef","firstButtonRef","selected","setSelected","isCorrect","setIsCorrect","current","focus","document","body","style","overflow","handleOptionClick","selectedOption","correct","handleKeyDown","e","key","className","role","onKeyDown","ref","children","fileName","_jsxFileName","lineNumber","columnNumber","map","opt","index","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/MCQModal.js"],"sourcesContent":["// src/components/McqModal.js\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './MCQModal.css';\r\n\r\nconst MCQModal = ({ questionData, onAnswer }) => {\r\n  const { question, options, correctOption } = questionData;\r\n  const modalRef = useRef(null);\r\n  const firstButtonRef = useRef(null);\r\n  const [selected, setSelected] = useState(null);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Focus the first button when the modal opens\r\n    firstButtonRef.current.focus();\r\n\r\n    // Prevent scrolling on the background\r\n    document.body.style.overflow = 'hidden';\r\n\r\n    return () => {\r\n      document.body.style.overflow = 'auto';\r\n    };\r\n  }, []);\r\n\r\n  const handleOptionClick = (selectedOption) => {\r\n    setSelected(selectedOption);\r\n    const correct = selectedOption === correctOption;\r\n    setIsCorrect(correct);\r\n    onAnswer(correct);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Escape') {\r\n      // Optionally, handle closing the modal with the Escape key\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"modal-overlay\"\r\n      role=\"dialog\"\r\n      aria-modal=\"true\"\r\n      onKeyDown={handleKeyDown}\r\n      ref={modalRef}\r\n    >\r\n      <div className=\"modal-content\">\r\n        <h2>Question</h2>\r\n        <p>{question}</p>\r\n        <div className=\"options\">\r\n          {options.map((opt, index) => (\r\n            <button\r\n              key={index}\r\n              onClick={() => handleOptionClick(opt)}\r\n              ref={index === 0 ? firstButtonRef : null}\r\n              disabled={selected !== null}\r\n              className={\r\n                selected\r\n                  ? opt === correctOption\r\n                    ? 'correct'\r\n                    : opt === selected\r\n                    ? 'incorrect'\r\n                    : ''\r\n                  : ''\r\n              }\r\n            >\r\n              {opt}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MCQModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}