{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImage from '../assets/bonus.png'; // Ensure correct path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const triggeredRef = useRef(new Set()); // To prevent multiple triggers\n\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50;\n  const ducklingHeight = 50;\n  const threshold = 10; // pixels\n\n  const BLOCK_TYPES = {\n    BLUE: 'blue',\n    RED: 'red',\n    QUESTION: 'question',\n    USED_QUESTION: 'used-question'\n  };\n\n  // Helper function to generate blocks ensuring no two reds in a row\n  const generateBlock = lastBlockType => {\n    const randomValue = Math.random();\n    if (lastBlockType === BLOCK_TYPES.RED) {\n      return {\n        type: BLOCK_TYPES.BLUE,\n        x: 0,\n        width: blockWidth,\n        height: 50\n      };\n    } else if (randomValue < 0.1) {\n      // 10% chance for question block\n      return {\n        type: BLOCK_TYPES.QUESTION,\n        x: 0,\n        width: blockWidth,\n        height: 50,\n        interacted: false\n      };\n    } else {\n      return {\n        type: Math.random() < 0.3 ? BLOCK_TYPES.RED : BLOCK_TYPES.BLUE,\n        x: 0,\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // 1. Initial Block Generation\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: BLOCK_TYPES.BLUE,\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generateBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // 2. Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // 3. Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || BLOCK_TYPES.BLUE;\n                const newBlock = generateBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling is centrally on the block\n            const isOnBlock = duckLeft >= blockLeft + threshold && duckRight <= blockRight - threshold;\n            if (isOnBlock) {\n              if (block.type === BLOCK_TYPES.RED && !answeredBlocks.has(i)) {\n                triggerRedBlockEvent(i);\n                return prevLeft; // Prevent moving into the red block\n              }\n              if (block.type === BLOCK_TYPES.QUESTION && !block.interacted) {\n                if (!triggeredRef.current.has(i)) {\n                  // Prevent multiple triggers\n                  triggerQuestionBlockEvent(i);\n                  triggeredRef.current.add(i);\n                }\n                return prevLeft; // Prevent moving into the question block\n              }\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerQuestionBlockEvent = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n\n    // Mark block as interacted\n    setBlocks(prevBlocks => {\n      const updatedBlocks = [...prevBlocks];\n      updatedBlocks[blockIndex] = {\n        ...updatedBlocks[blockIndex],\n        interacted: true,\n        type: BLOCK_TYPES.USED_QUESTION\n      };\n      return updatedBlocks;\n    });\n  };\n  const triggerRedBlockEvent = blockIndex => {\n    // Existing logic for red blocks\n    // For example, deduct a life or implement other mechanics\n    setLives(prevLives => {\n      const newLives = prevLives - 1;\n      if (newLives <= 0) {\n        alert('Game Over!');\n        resetGame(); // Reset the game entirely\n        return 3; // Reset lives to initial value after game over\n      }\n      return newLives;\n    });\n\n    // Prevent moving into the red block\n    setLeftPosition(50);\n    setCameraX(0);\n\n    // Optionally, reset answered blocks to allow revisiting questions\n    setAnsweredBlocks(new Set());\n    setIsPaused(false);\n  };\n\n  // 4. Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: BLOCK_TYPES.BLUE,\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two reds in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generateBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // 5. Handle Answer Function\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 10); // Reward 10 extra coins\n      setScore(prevScore => prevScore + 10);\n      // Optionally, provide feedback\n    } else {\n      // No penalty as per requirements\n      // Optionally, provide feedback\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n    triggeredRef.current.clear(); // Allow future interactions\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"VCmRJsmJjZ50y8t6QuTd2pzTK8Q=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImage","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","triggeredRef","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","BLOCK_TYPES","BLUE","RED","QUESTION","USED_QUESTION","generateBlock","lastBlockType","randomValue","Math","random","type","x","width","height","interacted","blocks","setBlocks","initialBlocks","i","push","newBlock","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prevLeft","potentialNewPos","gameWidth","current","clientWidth","lastBlock","length","prevBlocks","_prevBlocks","duckLeft","duckRight","block","blockLeft","blockRight","isOnBlock","has","triggerRedBlockEvent","triggerQuestionBlockEvent","add","maxLeft","min","clearInterval","setTimeout","blockIndex","floor","updatedBlocks","prevLives","newLives","alert","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","clear","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImage from '../assets/bonus.png'; // Ensure correct path\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n\r\n  const triggeredRef = useRef(new Set()); // To prevent multiple triggers\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50;\r\n  const ducklingHeight = 50;\r\n  const threshold = 10; // pixels\r\n\r\n  const BLOCK_TYPES = {\r\n    BLUE: 'blue',\r\n    RED: 'red',\r\n    QUESTION: 'question',\r\n    USED_QUESTION: 'used-question',\r\n  };\r\n\r\n  // Helper function to generate blocks ensuring no two reds in a row\r\n  const generateBlock = (lastBlockType) => {\r\n    const randomValue = Math.random();\r\n\r\n    if (lastBlockType === BLOCK_TYPES.RED) {\r\n      return {\r\n        type: BLOCK_TYPES.BLUE,\r\n        x: 0,\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else if (randomValue < 0.1) { // 10% chance for question block\r\n      return {\r\n        type: BLOCK_TYPES.QUESTION,\r\n        x: 0,\r\n        width: blockWidth,\r\n        height: 50,\r\n        interacted: false,\r\n      };\r\n    } else {\r\n      return {\r\n        type: Math.random() < 0.3 ? BLOCK_TYPES.RED : BLOCK_TYPES.BLUE,\r\n        x: 0,\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // 1. Initial Block Generation\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: BLOCK_TYPES.BLUE,\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generateBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // 2. Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // 3. Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth + blockWidth) {\r\n              setBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || BLOCK_TYPES.BLUE;\r\n                const newBlock = generateBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling is centrally on the block\r\n            const isOnBlock =\r\n              duckLeft >= blockLeft + threshold &&\r\n              duckRight <= blockRight - threshold;\r\n\r\n            if (isOnBlock) {\r\n              if (block.type === BLOCK_TYPES.RED && !answeredBlocks.has(i)) {\r\n                triggerRedBlockEvent(i);\r\n                return prevLeft; // Prevent moving into the red block\r\n              }\r\n\r\n              if (block.type === BLOCK_TYPES.QUESTION && !block.interacted) {\r\n                if (!triggeredRef.current.has(i)) { // Prevent multiple triggers\r\n                  triggerQuestionBlockEvent(i);\r\n                  triggeredRef.current.add(i);\r\n                }\r\n                return prevLeft; // Prevent moving into the question block\r\n              }\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerQuestionBlockEvent = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n\r\n    // Mark block as interacted\r\n    setBlocks((prevBlocks) => {\r\n      const updatedBlocks = [...prevBlocks];\r\n      updatedBlocks[blockIndex] = {\r\n        ...updatedBlocks[blockIndex],\r\n        interacted: true,\r\n        type: BLOCK_TYPES.USED_QUESTION,\r\n      };\r\n      return updatedBlocks;\r\n    });\r\n  };\r\n\r\n  const triggerRedBlockEvent = (blockIndex) => {\r\n    // Existing logic for red blocks\r\n    // For example, deduct a life or implement other mechanics\r\n    setLives((prevLives) => {\r\n      const newLives = prevLives - 1;\r\n      if (newLives <= 0) {\r\n        alert('Game Over!');\r\n        resetGame(); // Reset the game entirely\r\n        return 3; // Reset lives to initial value after game over\r\n      }\r\n      return newLives;\r\n    });\r\n\r\n    // Prevent moving into the red block\r\n    setLeftPosition(50);\r\n    setCameraX(0);\r\n\r\n    // Optionally, reset answered blocks to allow revisiting questions\r\n    setAnsweredBlocks(new Set());\r\n\r\n    setIsPaused(false);\r\n  };\r\n\r\n  // 4. Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: BLOCK_TYPES.BLUE,\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two reds in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generateBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // 5. Handle Answer Function\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 10); // Reward 10 extra coins\r\n      setScore((prevScore) => prevScore + 10);\r\n      // Optionally, provide feedback\r\n    } else {\r\n      // No penalty as per requirements\r\n      // Optionally, provide feedback\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n    triggeredRef.current.clear(); // Allow future interactions\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`,\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}