{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport bonusImage from '../assets/bonus.png'; // Import the bonus image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const [currentBlockType, setCurrentBlockType] = useState(null); // New state for block type\n\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n  const threshold = 10; // pixels\n\n  // Helper function to generate platform blocks ensuring no two reds in a row\n  const generatePlatformBlock = lastBlockType => {\n    if (lastBlockType === 'red') {\n      return {\n        type: 'blue',\n        x: 0,\n        // Placeholder, set x when adding to blocks\n        width: blockWidth,\n        height: 50\n      };\n    }\n    const rand = Math.random();\n    if (rand < 0.25) {\n      // 25% chance for 'red'\n      return {\n        type: 'red',\n        x: 0,\n        width: blockWidth,\n        height: 50\n      };\n    } else {\n      return {\n        type: 'blue',\n        x: 0,\n        width: blockWidth,\n        height: 50\n      };\n    }\n  };\n\n  // Helper function to generate bonus blocks\n  const generateBonusBlock = lastBonusX => {\n    const spacing = 300; // Minimum spacing between bonus blocks\n    const rand = Math.random();\n    if (rand < 0.2) {\n      // 20% chance to generate a bonus block\n      return {\n        id: Date.now(),\n        // Unique identifier\n        x: lastBonusX + spacing + Math.random() * 200,\n        // Random spacing\n        y: 150,\n        // Fixed height\n        type: 'bonus'\n      };\n    }\n    return null;\n  };\n\n  // 1. Initial Platform Block Generation\n  const [platformBlocks, setPlatformBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      if (i === 0) {\n        // First block is always blue\n        initialBlocks.push({\n          type: 'blue',\n          x: i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      } else {\n        // Use helper function to ensure no two reds in a row\n        const lastBlockType = initialBlocks[i - 1].type;\n        const newBlock = generatePlatformBlock(lastBlockType);\n        newBlock.x = i * blockWidth;\n        initialBlocks.push(newBlock);\n      }\n    }\n    return initialBlocks;\n  });\n\n  // 2. Initial Bonus Block Generation\n  const [bonusBlocks, setBonusBlocks] = useState(() => {\n    const initialBonusBlocks = [];\n    let lastBonusX = 500; // Starting x position for bonus blocks\n\n    for (let i = 0; i < 5; i++) {\n      // Generate initial 5 bonus blocks\n      const newBonus = generateBonusBlock(lastBonusX);\n      if (newBonus) {\n        initialBonusBlocks.push(newBonus);\n        lastBonusX = newBonus.x;\n      }\n    }\n    return initialBonusBlocks;\n  });\n\n  // 3. Handle Key Press for Jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n\n  // 4. Game Loop Effect\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prevLeft => {\n          const potentialNewPos = prevLeft + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new platform blocks if nearing the end\n            const lastPlatformBlock = platformBlocks[platformBlocks.length - 1];\n            if (lastPlatformBlock.x - cameraX < gameWidth + blockWidth) {\n              setPlatformBlocks(prevBlocks => {\n                var _prevBlocks;\n                const lastBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const newBlock = generatePlatformBlock(lastBlockType);\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\n                return [...prevBlocks, newBlock];\n              });\n            }\n\n            // Dynamically add new bonus blocks if nearing the end\n            const lastBonusBlock = bonusBlocks[bonusBlocks.length - 1];\n            if (lastBonusBlock && lastBonusBlock.x - cameraX < gameWidth + blockWidth * 5) {\n              const newBonus = generateBonusBlock(lastBonusBlock.x);\n              if (newBonus) {\n                setBonusBlocks(prevBonuses => [...prevBonuses, newBonus]);\n              }\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n          const duckBottom = isJumping ? jumpHeight + ducklingHeight : ducklingHeight;\n\n          // Collision with Platform Blocks\n          for (let i = 0; i < platformBlocks.length; i++) {\n            const block = platformBlocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n            const blockTop = 0; // Platform blocks are at the bottom\n\n            // Check if duckling is landing on the block\n            const isLanding = duckBottom >= blockTop && duckBottom <= blockTop + 10 &&\n            // Tolerance for landing\n            duckLeft + threshold < blockRight && duckRight - threshold > blockLeft && block.type === 'red' && !answeredBlocks.has(`platform-${i}`);\n            if (isLanding) {\n              triggerMCQ(`platform-${i}`, block.type);\n              return prevLeft; // Prevent moving into the block\n            }\n          }\n\n          // Collision with Bonus Blocks\n          for (let i = 0; i < bonusBlocks.length; i++) {\n            const block = bonusBlocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n            const blockTop = 200; // Fixed height for bonus blocks\n\n            // Check if duckling is hitting the bonus block while jumping\n            const isHitting = isJumping && duckLeft + threshold < blockRight && duckRight - threshold > blockLeft && !answeredBlocks.has(`bonus-${i}`);\n            if (isHitting) {\n              triggerMCQ(`bonus-${i}`, block.type);\n              return prevLeft; // Prevent moving into the block\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the current blocks\n          const maxLeft = platformBlocks[platformBlocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, platformBlocks, bonusBlocks, answeredBlocks, ducklingWidth, cameraX, isJumping]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = (blockId, blockType) => {\n    setCurrentBlockType(blockType); // Store the type of block\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockId));\n  };\n\n  // 5. Reset Game Function\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setPlatformBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        if (i === 0) {\n          // First block is always blue\n          initialBlocks.push({\n            type: 'blue',\n            x: i * blockWidth,\n            width: blockWidth,\n            height: 50\n          });\n        } else {\n          // Use helper function to ensure no two reds in a row\n          const lastBlockType = initialBlocks[i - 1].type;\n          const newBlock = generatePlatformBlock(lastBlockType);\n          newBlock.x = i * blockWidth;\n          initialBlocks.push(newBlock);\n        }\n      }\n      return initialBlocks;\n    });\n    setBonusBlocks(() => {\n      const initialBonusBlocks = [];\n      let lastBonusX = 500; // Starting x position for bonus blocks\n\n      for (let i = 0; i < 5; i++) {\n        // Generate initial 5 bonus blocks\n        const newBonus = generateBonusBlock(lastBonusX);\n        if (newBonus) {\n          initialBonusBlocks.push(newBonus);\n          lastBonusX = newBonus.x;\n        }\n      }\n      return initialBonusBlocks;\n    });\n    setLives(3); // Reset lives to initial value\n    setScore(0);\n    setCoins(0);\n  };\n\n  // 6. Handle Answer Function\n  const handleAnswer = isCorrect => {\n    if (currentBlockType === 'red') {\n      if (isCorrect) {\n        setCoins(prevCoins => prevCoins + 1);\n        setScore(prevScore => prevScore + 10);\n      } else {\n        // Deduct a life\n        setLives(prevLives => {\n          const newLives = prevLives - 1;\n          if (newLives <= 0) {\n            alert('Game Over!');\n            resetGame(); // Reset the game entirely\n            return 3; // Reset lives to initial value after game over\n          }\n          return newLives;\n        });\n\n        // Reset the duckling's position to the beginning\n        setLeftPosition(50);\n        setCameraX(0);\n\n        // Optionally, reset answered blocks to allow revisiting questions\n        setAnsweredBlocks(new Set());\n      }\n    } else if (currentBlockType === 'bonus') {\n      if (isCorrect) {\n        setCoins(prevCoins => prevCoins + 5); // Award extra coins for bonus\n        setScore(prevScore => prevScore + 20); // Optionally, more score\n      }\n      // Lives remain unchanged for bonus blocks, irrespective of correctness\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n    setCurrentBlockType(null); // Reset the current block type\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: platformBlocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bonus-blocks\",\n      children: bonusBlocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block bonus`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          bottom: `${block.y}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`,\n          backgroundImage: `url(${bonusImage})`,\n          backgroundSize: 'cover',\n          backgroundRepeat: 'no-repeat'\n        }\n      }, block.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"vLB8jWOP3/p1zyWasQEK2iKz1lA=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","bonusImage","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","currentBlockType","setCurrentBlockType","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","threshold","generatePlatformBlock","lastBlockType","type","x","width","height","rand","Math","random","generateBonusBlock","lastBonusX","spacing","id","Date","now","y","platformBlocks","setPlatformBlocks","initialBlocks","i","push","newBlock","bonusBlocks","setBonusBlocks","initialBonusBlocks","newBonus","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prevLeft","potentialNewPos","gameWidth","current","clientWidth","lastPlatformBlock","length","prevBlocks","_prevBlocks","lastBonusBlock","prevBonuses","duckLeft","duckRight","duckBottom","block","blockLeft","blockRight","blockTop","isLanding","has","triggerMCQ","isHitting","maxLeft","min","clearInterval","setTimeout","blockId","blockType","floor","prev","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","bottom","backgroundImage","backgroundSize","backgroundRepeat","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\nimport bonusImage from '../assets/bonus.png'; // Import the bonus image\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n  const [currentBlockType, setCurrentBlockType] = useState(null); // New state for block type\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n  const threshold = 10; // pixels\r\n\r\n  // Helper function to generate platform blocks ensuring no two reds in a row\r\n  const generatePlatformBlock = (lastBlockType) => {\r\n    if (lastBlockType === 'red') {\r\n      return {\r\n        type: 'blue',\r\n        x: 0, // Placeholder, set x when adding to blocks\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n\r\n    const rand = Math.random();\r\n    if (rand < 0.25) { // 25% chance for 'red'\r\n      return {\r\n        type: 'red',\r\n        x: 0,\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    } else {\r\n      return {\r\n        type: 'blue',\r\n        x: 0,\r\n        width: blockWidth,\r\n        height: 50,\r\n      };\r\n    }\r\n  };\r\n\r\n  // Helper function to generate bonus blocks\r\n  const generateBonusBlock = (lastBonusX) => {\r\n    const spacing = 300; // Minimum spacing between bonus blocks\r\n    const rand = Math.random();\r\n    if (rand < 0.2) { // 20% chance to generate a bonus block\r\n      return {\r\n        id: Date.now(), // Unique identifier\r\n        x: lastBonusX + spacing + Math.random() * 200, // Random spacing\r\n        y: 150, // Fixed height\r\n        type: 'bonus',\r\n      };\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 1. Initial Platform Block Generation\r\n  const [platformBlocks, setPlatformBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n\r\n    for (let i = 0; i < 15; i++) {\r\n      if (i === 0) {\r\n        // First block is always blue\r\n        initialBlocks.push({\r\n          type: 'blue',\r\n          x: i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      } else {\r\n        // Use helper function to ensure no two reds in a row\r\n        const lastBlockType = initialBlocks[i - 1].type;\r\n        const newBlock = generatePlatformBlock(lastBlockType);\r\n        newBlock.x = i * blockWidth;\r\n        initialBlocks.push(newBlock);\r\n      }\r\n    }\r\n\r\n    return initialBlocks;\r\n  });\r\n\r\n  // 2. Initial Bonus Block Generation\r\n  const [bonusBlocks, setBonusBlocks] = useState(() => {\r\n    const initialBonusBlocks = [];\r\n    let lastBonusX = 500; // Starting x position for bonus blocks\r\n\r\n    for (let i = 0; i < 5; i++) { // Generate initial 5 bonus blocks\r\n      const newBonus = generateBonusBlock(lastBonusX);\r\n      if (newBonus) {\r\n        initialBonusBlocks.push(newBonus);\r\n        lastBonusX = newBonus.x;\r\n      }\r\n    }\r\n\r\n    return initialBonusBlocks;\r\n  });\r\n\r\n  // 3. Handle Key Press for Jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  // 4. Game Loop Effect\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prevLeft) => {\r\n          const potentialNewPos = prevLeft + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new platform blocks if nearing the end\r\n            const lastPlatformBlock = platformBlocks[platformBlocks.length - 1];\r\n            if (lastPlatformBlock.x - cameraX < gameWidth + blockWidth) {\r\n              setPlatformBlocks((prevBlocks) => {\r\n                const lastBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const newBlock = generatePlatformBlock(lastBlockType);\r\n                newBlock.x = prevBlocks[prevBlocks.length - 1].x + blockWidth;\r\n                return [...prevBlocks, newBlock];\r\n              });\r\n            }\r\n\r\n            // Dynamically add new bonus blocks if nearing the end\r\n            const lastBonusBlock = bonusBlocks[bonusBlocks.length - 1];\r\n            if (lastBonusBlock && lastBonusBlock.x - cameraX < gameWidth + blockWidth * 5) {\r\n              const newBonus = generateBonusBlock(lastBonusBlock.x);\r\n              if (newBonus) {\r\n                setBonusBlocks((prevBonuses) => [...prevBonuses, newBonus]);\r\n              }\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n          const duckBottom = isJumping ? jumpHeight + ducklingHeight : ducklingHeight;\r\n\r\n          // Collision with Platform Blocks\r\n          for (let i = 0; i < platformBlocks.length; i++) {\r\n            const block = platformBlocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n            const blockTop = 0; // Platform blocks are at the bottom\r\n\r\n            // Check if duckling is landing on the block\r\n            const isLanding =\r\n              duckBottom >= blockTop &&\r\n              duckBottom <= blockTop + 10 && // Tolerance for landing\r\n              duckLeft + threshold < blockRight &&\r\n              duckRight - threshold > blockLeft &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(`platform-${i}`);\r\n\r\n            if (isLanding) {\r\n              triggerMCQ(`platform-${i}`, block.type);\r\n              return prevLeft; // Prevent moving into the block\r\n            }\r\n          }\r\n\r\n          // Collision with Bonus Blocks\r\n          for (let i = 0; i < bonusBlocks.length; i++) {\r\n            const block = bonusBlocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n            const blockTop = 200; // Fixed height for bonus blocks\r\n\r\n            // Check if duckling is hitting the bonus block while jumping\r\n            const isHitting =\r\n              isJumping &&\r\n              duckLeft + threshold < blockRight &&\r\n              duckRight - threshold > blockLeft &&\r\n              !answeredBlocks.has(`bonus-${i}`);\r\n\r\n            if (isHitting) {\r\n              triggerMCQ(`bonus-${i}`, block.type);\r\n              return prevLeft; // Prevent moving into the block\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the current blocks\r\n          const maxLeft = platformBlocks[platformBlocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, platformBlocks, bonusBlocks, answeredBlocks, ducklingWidth, cameraX, isJumping]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockId, blockType) => {\r\n    setCurrentBlockType(blockType); // Store the type of block\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockId));\r\n  };\r\n\r\n  // 5. Reset Game Function\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setPlatformBlocks(() => {\r\n      const initialBlocks = [];\r\n\r\n      for (let i = 0; i < 15; i++) {\r\n        if (i === 0) {\r\n          // First block is always blue\r\n          initialBlocks.push({\r\n            type: 'blue',\r\n            x: i * blockWidth,\r\n            width: blockWidth,\r\n            height: 50,\r\n          });\r\n        } else {\r\n          // Use helper function to ensure no two reds in a row\r\n          const lastBlockType = initialBlocks[i - 1].type;\r\n          const newBlock = generatePlatformBlock(lastBlockType);\r\n          newBlock.x = i * blockWidth;\r\n          initialBlocks.push(newBlock);\r\n        }\r\n      }\r\n\r\n      return initialBlocks;\r\n    });\r\n    setBonusBlocks(() => {\r\n      const initialBonusBlocks = [];\r\n      let lastBonusX = 500; // Starting x position for bonus blocks\r\n\r\n      for (let i = 0; i < 5; i++) { // Generate initial 5 bonus blocks\r\n        const newBonus = generateBonusBlock(lastBonusX);\r\n        if (newBonus) {\r\n          initialBonusBlocks.push(newBonus);\r\n          lastBonusX = newBonus.x;\r\n        }\r\n      }\r\n\r\n      return initialBonusBlocks;\r\n    });\r\n    setLives(3); // Reset lives to initial value\r\n    setScore(0);\r\n    setCoins(0);\r\n  };\r\n\r\n  // 6. Handle Answer Function\r\n  const handleAnswer = (isCorrect) => {\r\n    if (currentBlockType === 'red') {\r\n      if (isCorrect) {\r\n        setCoins((prevCoins) => prevCoins + 1);\r\n        setScore((prevScore) => prevScore + 10);\r\n      } else {\r\n        // Deduct a life\r\n        setLives((prevLives) => {\r\n          const newLives = prevLives - 1;\r\n          if (newLives <= 0) {\r\n            alert('Game Over!');\r\n            resetGame(); // Reset the game entirely\r\n            return 3; // Reset lives to initial value after game over\r\n          }\r\n          return newLives;\r\n        });\r\n\r\n        // Reset the duckling's position to the beginning\r\n        setLeftPosition(50);\r\n        setCameraX(0);\r\n\r\n        // Optionally, reset answered blocks to allow revisiting questions\r\n        setAnsweredBlocks(new Set());\r\n      }\r\n    } else if (currentBlockType === 'bonus') {\r\n      if (isCorrect) {\r\n        setCoins((prevCoins) => prevCoins + 5); // Award extra coins for bonus\r\n        setScore((prevScore) => prevScore + 20); // Optionally, more score\r\n      }\r\n      // Lives remain unchanged for bonus blocks, irrespective of correctness\r\n    }\r\n\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n    setCurrentBlockType(null); // Reset the current block type\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {platformBlocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"bonus-blocks\">\r\n        {bonusBlocks.map((block, index) => (\r\n          <div\r\n            key={block.id}\r\n            className={`block bonus`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`,\r\n              bottom: `${block.y}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n              backgroundImage: `url(${bonusImage})`,\r\n              backgroundSize: 'cover',\r\n              backgroundRepeat: 'no-repeat',\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`,\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}