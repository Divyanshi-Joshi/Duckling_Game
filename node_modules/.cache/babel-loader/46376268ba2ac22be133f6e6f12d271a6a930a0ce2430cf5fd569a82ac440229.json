{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      initialBlocks.push({\n        type: [4, 9, 14].includes(i) ? 'red' : 'blue',\n        x: i * 100,\n        width: 100,\n        height: 50\n      });\n    }\n    return initialBlocks;\n  });\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prev => {\n          const potentialNewPos = prev + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth) {\n              const newIndex = blocks.length;\n              setBlocks(prevBlocks => [...prevBlocks, {\n                type: [4, 9, 14].includes(newIndex) ? 'red' : 'blue',\n                x: lastBlock.x + blockWidth,\n                width: blockWidth,\n                height: 50\n              }]);\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling overlaps with this block\n            const isOverlapping = duckRight > blockLeft && duckLeft < blockRight;\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n              triggerMCQ(i);\n              return prev; // Prevent moving into the red block\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the game world\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        initialBlocks.push({\n          type: [4, 9, 14].includes(i) ? 'red' : 'blue',\n          x: i * 100,\n          width: 100,\n          height: 50\n        });\n      }\n      return initialBlocks;\n    });\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setLives(prevLives => prevLives - 1);\n      if (lives - 1 <= 0) {\n        // Game over logic here\n        alert('Game Over!');\n        // Optionally, reset the game or navigate to Game Over screen\n        resetGame();\n      } else {\n        resetGame(); // Reset the game state including answeredBlocks\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"KKlUL/DON+SIsHo1aNgnZvwVm5Q=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","blocks","setBlocks","initialBlocks","i","push","type","includes","x","width","height","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prev","potentialNewPos","gameWidth","current","clientWidth","lastBlock","length","newIndex","prevBlocks","duckLeft","duckRight","block","blockLeft","blockRight","isOverlapping","has","triggerMCQ","maxLeft","Math","min","clearInterval","setTimeout","blockIndex","floor","random","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n    for (let i = 0; i < 15; i++) {\r\n      initialBlocks.push({\r\n        type: [4, 9, 14].includes(i) ? 'red' : 'blue',\r\n        x: i * 100,\r\n        width: 100,\r\n        height: 50,\r\n      });\r\n    }\r\n    return initialBlocks;\r\n  });\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prev) => {\r\n          const potentialNewPos = prev + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth) {\r\n              const newIndex = blocks.length;\r\n              setBlocks((prevBlocks) => [\r\n                ...prevBlocks,\r\n                {\r\n                  type: [4, 9, 14].includes(newIndex) ? 'red' : 'blue',\r\n                  x: lastBlock.x + blockWidth,\r\n                  width: blockWidth,\r\n                  height: 50,\r\n                },\r\n              ]);\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling overlaps with this block\r\n            const isOverlapping =\r\n              duckRight > blockLeft && duckLeft < blockRight;\r\n\r\n            if (\r\n              isOverlapping &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i)\r\n            ) {\r\n              triggerMCQ(i);\r\n              return prev; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the game world\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n      for (let i = 0; i < 15; i++) {\r\n        initialBlocks.push({\r\n          type: [4, 9, 14].includes(i) ? 'red' : 'blue',\r\n          x: i * 100,\r\n          width: 100,\r\n          height: 50,\r\n        });\r\n      }\r\n      return initialBlocks;\r\n    });\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setLives((prevLives) => prevLives - 1);\r\n      if (lives - 1 <= 0) {\r\n        // Game over logic here\r\n        alert('Game Over!');\r\n        // Optionally, reset the game or navigate to Game Over screen\r\n        resetGame();\r\n      } else {\r\n        resetGame(); // Reset the game state including answeredBlocks\r\n      }\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}