{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins,\n  setGameStarted // If you want to control game state from App.js\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [shift, setShift] = useState(0); // Platform shift\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 80;\n  const totalBlocks = 20;\n  const ducklingWidth = 50; // Width in pixels\n  const ducklingHeight = 50; // Height in pixels\n  const fixedDucklingLeft = 100; // Fixed horizontal position\n\n  // Initialize blocks as state\n  const [blocks, setBlocks] = useState(() => Array.from({\n    length: totalBlocks\n  }).map((_, index) => ({\n    type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\n    x: index * blockWidth,\n    width: blockWidth,\n    height: 50\n  })));\n\n  // Function to add new blocks dynamically\n  const addNewBlocks = (number = 10) => {\n    setBlocks(prevBlocks => {\n      const newBlocks = [];\n      const lastBlock = prevBlocks[prevBlocks.length - 1];\n      const startIndex = prevBlocks.length;\n      for (let i = 0; i < number; i++) {\n        const index = startIndex + i;\n        newBlocks.push({\n          type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\n          x: lastBlock.x + blockWidth + i * blockWidth,\n          width: blockWidth,\n          height: 50\n        });\n      }\n      return [...prevBlocks, ...newBlocks];\n    });\n  };\n\n  // Function to cull off-screen blocks\n  const cullBlocks = () => {\n    setBlocks(prevBlocks => prevBlocks.filter(block => block.x - shift + block.width > 0));\n  };\n\n  // Function to check collision between duckling and blocks\n  const checkCollision = currentShift => {\n    blocks.forEach((block, index) => {\n      const onScreenX = block.x - currentShift;\n\n      // Skip blocks not visible\n      if (onScreenX + block.width < 0 || onScreenX > gameBoardRef.current.clientWidth) {\n        return;\n      }\n\n      // Define duckling's bounding box\n      const ducklingTop = 250 - (isJumping ? jumpHeight : 0); // Adjust based on CSS\n      const ducklingLeft = fixedDucklingLeft;\n      const ducklingRight = ducklingLeft + ducklingWidth;\n      const ducklingBottom = ducklingTop + ducklingHeight;\n\n      // Define block's bounding box\n      const blockTop = 250; // Platform top\n      const blockLeft = onScreenX;\n      const blockRight = blockLeft + block.width;\n      const blockBottom = blockTop + block.height;\n\n      // Simple AABB collision detection\n      const isOverlapping = ducklingRight > blockLeft && ducklingLeft < blockRight && ducklingBottom > blockTop && ducklingTop < blockBottom;\n      if (isOverlapping && block.type === 'red' && !answeredBlocks.has(index)) {\n        triggerMCQ(index);\n      }\n    });\n  };\n\n  // Game loop to shift platform\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setShift(prevShift => {\n          const newShift = prevShift + forwardSpeed;\n\n          // Add new blocks if the last block is approaching the viewport\n          const lastBlock = blocks[blocks.length - 1];\n          const viewportWidth = gameBoardRef.current.clientWidth;\n          if (lastBlock.x - newShift < viewportWidth) {\n            addNewBlocks();\n          }\n\n          // Perform collision detection\n          checkCollision(newShift);\n\n          // Optionally, cull off-screen blocks to optimize performance\n          if (newShift % (blockWidth * 10) === 0) {\n            // Example condition\n            cullBlocks();\n          }\n          return newShift;\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, forwardSpeed]);\n\n  // Handle key presses for jumping\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const resetGame = () => {\n    setShift(0);\n    setBlocks(() => Array.from({\n      length: totalBlocks\n    }).map((_, index) => ({\n      type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\n      x: index * blockWidth,\n      width: blockWidth,\n      height: 50\n    })));\n    setAnsweredBlocks(new Set());\n    setIsPaused(false);\n    setIsJumping(false);\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setLives(prevLives => prevLives - 1);\n      if (lives - 1 <= 0) {\n        // Game over logic here\n        alert('Game Over!');\n        resetGame(); // Reset the game or navigate to a game over screen\n        if (setGameStarted) setGameStarted(false); // If controlling from App.js\n      } else {\n        resetGame(); // Reset the game state including answeredBlocks\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      style: {\n        transform: `translateX(-${shift}px)`,\n        transition: 'transform 0.02s linear' // Smooth transition\n      },\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${fixedDucklingLeft}px`,\n        // Fixed position\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"po+xu7NlX1ZhA6CFtd7ZUnjUCwA=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","setGameStarted","_s","gameBoardRef","shift","setShift","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","forwardSpeed","jumpHeight","jumpDuration","blockWidth","totalBlocks","ducklingWidth","ducklingHeight","fixedDucklingLeft","blocks","setBlocks","Array","from","length","map","_","index","type","includes","x","width","height","addNewBlocks","number","prevBlocks","newBlocks","lastBlock","startIndex","i","push","cullBlocks","filter","block","checkCollision","currentShift","forEach","onScreenX","current","clientWidth","ducklingTop","ducklingLeft","ducklingRight","ducklingBottom","blockTop","blockLeft","blockRight","blockBottom","isOverlapping","has","triggerMCQ","gameLoop","setInterval","prevShift","newShift","viewportWidth","clearInterval","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","setTimeout","blockIndex","Math","floor","random","prev","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","alert","className","ref","children","style","transform","transition","left","fileName","_jsxFileName","lineNumber","columnNumber","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n  setGameStarted, // If you want to control game state from App.js\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  \r\n  const [shift, setShift] = useState(0); // Platform shift\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 80;\r\n  const totalBlocks = 20;\r\n\r\n  const ducklingWidth = 50; // Width in pixels\r\n  const ducklingHeight = 50; // Height in pixels\r\n  const fixedDucklingLeft = 100; // Fixed horizontal position\r\n\r\n  // Initialize blocks as state\r\n  const [blocks, setBlocks] = useState(() =>\r\n    Array.from({ length: totalBlocks }).map((_, index) => ({\r\n      type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\r\n      x: index * blockWidth,\r\n      width: blockWidth,\r\n      height: 50,\r\n    }))\r\n  );\r\n\r\n  // Function to add new blocks dynamically\r\n  const addNewBlocks = (number = 10) => {\r\n    setBlocks((prevBlocks) => {\r\n      const newBlocks = [];\r\n      const lastBlock = prevBlocks[prevBlocks.length - 1];\r\n      const startIndex = prevBlocks.length;\r\n\r\n      for (let i = 0; i < number; i++) {\r\n        const index = startIndex + i;\r\n        newBlocks.push({\r\n          type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\r\n          x: lastBlock.x + blockWidth + i * blockWidth,\r\n          width: blockWidth,\r\n          height: 50,\r\n        });\r\n      }\r\n\r\n      return [...prevBlocks, ...newBlocks];\r\n    });\r\n  };\r\n\r\n  // Function to cull off-screen blocks\r\n  const cullBlocks = () => {\r\n    setBlocks((prevBlocks) =>\r\n      prevBlocks.filter((block) => block.x - shift + block.width > 0)\r\n    );\r\n  };\r\n\r\n  // Function to check collision between duckling and blocks\r\n  const checkCollision = (currentShift) => {\r\n    blocks.forEach((block, index) => {\r\n      const onScreenX = block.x - currentShift;\r\n\r\n      // Skip blocks not visible\r\n      if (onScreenX + block.width < 0 || onScreenX > gameBoardRef.current.clientWidth) {\r\n        return;\r\n      }\r\n\r\n      // Define duckling's bounding box\r\n      const ducklingTop = 250 - (isJumping ? jumpHeight : 0); // Adjust based on CSS\r\n      const ducklingLeft = fixedDucklingLeft;\r\n      const ducklingRight = ducklingLeft + ducklingWidth;\r\n      const ducklingBottom = ducklingTop + ducklingHeight;\r\n\r\n      // Define block's bounding box\r\n      const blockTop = 250; // Platform top\r\n      const blockLeft = onScreenX;\r\n      const blockRight = blockLeft + block.width;\r\n      const blockBottom = blockTop + block.height;\r\n\r\n      // Simple AABB collision detection\r\n      const isOverlapping =\r\n        ducklingRight > blockLeft &&\r\n        ducklingLeft < blockRight &&\r\n        ducklingBottom > blockTop &&\r\n        ducklingTop < blockBottom;\r\n\r\n      if (isOverlapping && block.type === 'red' && !answeredBlocks.has(index)) {\r\n        triggerMCQ(index);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Game loop to shift platform\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setShift((prevShift) => {\r\n          const newShift = prevShift + forwardSpeed;\r\n\r\n          // Add new blocks if the last block is approaching the viewport\r\n          const lastBlock = blocks[blocks.length - 1];\r\n          const viewportWidth = gameBoardRef.current.clientWidth;\r\n          if (lastBlock.x - newShift < viewportWidth) {\r\n            addNewBlocks();\r\n          }\r\n\r\n          // Perform collision detection\r\n          checkCollision(newShift);\r\n\r\n          // Optionally, cull off-screen blocks to optimize performance\r\n          if (newShift % (blockWidth * 10) === 0) { // Example condition\r\n            cullBlocks();\r\n          }\r\n\r\n          return newShift;\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, forwardSpeed]);\r\n\r\n  // Handle key presses for jumping\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setShift(0);\r\n    setBlocks(() =>\r\n      Array.from({ length: totalBlocks }).map((_, index) => ({\r\n        type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\r\n        x: index * blockWidth,\r\n        width: blockWidth,\r\n        height: 50,\r\n      }))\r\n    );\r\n    setAnsweredBlocks(new Set());\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setLives((prevLives) => prevLives - 1);\r\n      if (lives - 1 <= 0) {\r\n        // Game over logic here\r\n        alert('Game Over!');\r\n        resetGame(); // Reset the game or navigate to a game over screen\r\n        if (setGameStarted) setGameStarted(false); // If controlling from App.js\r\n      } else {\r\n        resetGame(); // Reset the game state including answeredBlocks\r\n      }\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div\r\n        className=\"platform\"\r\n        style={{\r\n          transform: `translateX(-${shift}px)`,\r\n          transition: 'transform 0.02s linear', // Smooth transition\r\n        }}\r\n      >\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${fixedDucklingLeft}px`, // Fixed position\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}