{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const ducklingPositionRef = useRef(50); // Use a ref to track position in real-time\n  const [leftPosition, setLeftPosition] = useState(50); // State for rendering\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const forwardSpeed = 2; // pixels per frame\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 80;\n  const totalBlocks = 20;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n\n  const blocks = Array.from({\n    length: totalBlocks\n  }).map((_, index) => ({\n    type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\n    x: index * blockWidth,\n    width: blockWidth,\n    height: 50\n  }));\n\n  // Game loop using requestAnimationFrame\n  const gameLoopRef = useRef();\n  const lastTimeRef = useRef(performance.now());\n  const animate = time => {\n    if (!isPaused) {\n      const deltaTime = time - lastTimeRef.current;\n      lastTimeRef.current = time;\n\n      // Update the duckling's position\n      ducklingPositionRef.current += forwardSpeed * (deltaTime / 16.67); // Normalize for frame rate\n      setLeftPosition(ducklingPositionRef.current);\n\n      // Collision detection\n      const ducklingLeft = ducklingPositionRef.current;\n      const ducklingRight = ducklingLeft + ducklingWidth;\n      for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        const blockLeft = block.x;\n        const blockRight = block.x + block.width;\n\n        // Check if duckling overlaps with this block\n        const isOverlapping = ducklingRight > blockLeft && ducklingLeft < blockRight;\n        if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n          // Pause the game immediately\n          setIsPaused(true);\n          triggerMCQ(i);\n          return; // Exit the loop to prevent further updates\n        }\n      }\n\n      // Ensure the duckling doesn't move beyond the game board\n      const maxLeft = gameBoardRef.current.clientWidth - ducklingWidth;\n      ducklingPositionRef.current = Math.min(ducklingPositionRef.current, maxLeft);\n    }\n\n    // Request the next frame\n    gameLoopRef.current = requestAnimationFrame(animate);\n  };\n  useEffect(() => {\n    // Start the game loop\n    gameLoopRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(gameLoopRef.current);\n  }, [isPaused, blocks, answeredBlocks]);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const resetGame = () => {\n    ducklingPositionRef.current = 50; // Reset the ref\n    setLeftPosition(50); // Reset the state\n    setAnsweredBlocks(new Set());\n    setIsPaused(false);\n    setIsJumping(false);\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setLives(prevLives => prevLives - 1);\n      if (lives - 1 <= 0) {\n        // Game over logic here\n        alert('Game Over!');\n        // Optionally, reset the game or navigate to Game Over screen\n      } else {\n        resetGame(); // Reset the game state including answeredBlocks\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition}px`,\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"7bnyb8SV5i5IumrSX8DpVZ2Sk2A=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","ducklingPositionRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","forwardSpeed","jumpHeight","jumpDuration","blockWidth","totalBlocks","ducklingWidth","ducklingHeight","blocks","Array","from","length","map","_","index","type","includes","x","width","height","gameLoopRef","lastTimeRef","performance","now","animate","time","deltaTime","current","ducklingLeft","ducklingRight","i","block","blockLeft","blockRight","isOverlapping","has","triggerMCQ","maxLeft","clientWidth","Math","min","requestAnimationFrame","cancelAnimationFrame","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","setTimeout","blockIndex","floor","random","prev","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","alert","className","ref","children","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const ducklingPositionRef = useRef(50); // Use a ref to track position in real-time\r\n  const [leftPosition, setLeftPosition] = useState(50); // State for rendering\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n\r\n  const forwardSpeed = 2; // pixels per frame\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 80;\r\n  const totalBlocks = 20;\r\n\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n\r\n  const blocks = Array.from({ length: totalBlocks }).map((_, index) => ({\r\n    type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\r\n    x: index * blockWidth,\r\n    width: blockWidth,\r\n    height: 50,\r\n  }));\r\n\r\n  // Game loop using requestAnimationFrame\r\n  const gameLoopRef = useRef();\r\n  const lastTimeRef = useRef(performance.now());\r\n\r\n  const animate = (time) => {\r\n    if (!isPaused) {\r\n      const deltaTime = time - lastTimeRef.current;\r\n      lastTimeRef.current = time;\r\n\r\n      // Update the duckling's position\r\n      ducklingPositionRef.current += forwardSpeed * (deltaTime / 16.67); // Normalize for frame rate\r\n      setLeftPosition(ducklingPositionRef.current);\r\n\r\n      // Collision detection\r\n      const ducklingLeft = ducklingPositionRef.current;\r\n      const ducklingRight = ducklingLeft + ducklingWidth;\r\n\r\n      for (let i = 0; i < blocks.length; i++) {\r\n        const block = blocks[i];\r\n        const blockLeft = block.x;\r\n        const blockRight = block.x + block.width;\r\n\r\n        // Check if duckling overlaps with this block\r\n        const isOverlapping =\r\n          ducklingRight > blockLeft && ducklingLeft < blockRight;\r\n\r\n        if (\r\n          isOverlapping &&\r\n          block.type === 'red' &&\r\n          !answeredBlocks.has(i)\r\n        ) {\r\n          // Pause the game immediately\r\n          setIsPaused(true);\r\n          triggerMCQ(i);\r\n          return; // Exit the loop to prevent further updates\r\n        }\r\n      }\r\n\r\n      // Ensure the duckling doesn't move beyond the game board\r\n      const maxLeft = gameBoardRef.current.clientWidth - ducklingWidth;\r\n      ducklingPositionRef.current = Math.min(ducklingPositionRef.current, maxLeft);\r\n    }\r\n\r\n    // Request the next frame\r\n    gameLoopRef.current = requestAnimationFrame(animate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Start the game loop\r\n    gameLoopRef.current = requestAnimationFrame(animate);\r\n    return () => cancelAnimationFrame(gameLoopRef.current);\r\n  }, [isPaused, blocks, answeredBlocks]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    ducklingPositionRef.current = 50; // Reset the ref\r\n    setLeftPosition(50); // Reset the state\r\n    setAnsweredBlocks(new Set());\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setLives((prevLives) => prevLives - 1);\r\n      if (lives - 1 <= 0) {\r\n        // Game over logic here\r\n        alert('Game Over!');\r\n        // Optionally, reset the game or navigate to Game Over screen\r\n      } else {\r\n        resetGame(); // Reset the game state including answeredBlocks\r\n      }\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false);  // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition}px`,\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}