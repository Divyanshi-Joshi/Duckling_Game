{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport \"./GameBoard.css\";\nimport Duckling from \"./Duckling\";\nimport MCQModal from \"./MCQModal\";\nimport { questions } from \"../data/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins,\n  onGameOver // Add this prop to handle game over\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n\n  // Duckling position states\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [facingLeft, setFacingLeft] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const forwardSpeed = 2;\n  const moveSpeed = 5;\n  const jumpDuration = 600;\n\n  // MCQ Modal states\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n\n  // Key press state\n  const keysPressed = useRef({});\n\n  // Define block properties\n  const blockWidth = 80;\n  const platformY = 50;\n\n  // Total blocks and block positions\n  const totalBlocks = 20;\n  const blocks = Array.from({\n    length: totalBlocks\n  }).map((_, index) => ({\n    type: [4, 9, 14, 19].includes(index) ? \"red\" : \"blue\",\n    x: index * blockWidth,\n    y: 0,\n    width: blockWidth,\n    height: 50\n  }));\n  useEffect(() => {\n    const handleKeyDown = e => {\n      keysPressed.current[e.code] = true;\n    };\n    const handleKeyUp = e => {\n      keysPressed.current[e.code] = false;\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    const gameLoop = setInterval(() => {\n      if (!isPaused) {\n        // Continuous Forward Movement\n        setLeftPosition(prev => {\n          const newPos = prev + forwardSpeed;\n          const maxLeft = gameBoardRef.current.clientWidth - 50;\n          return Math.min(newPos, maxLeft);\n        });\n\n        // Optional: Handle Left and Right Movements if desired\n        if (keysPressed.current[\"ArrowLeft\"] || keysPressed.current[\"KeyA\"]) {\n          setLeftPosition(prev => Math.max(prev - moveSpeed, 0));\n          setFacingLeft(true);\n        }\n        if (keysPressed.current[\"ArrowRight\"] || keysPressed.current[\"KeyD\"]) {\n          setLeftPosition(prev => Math.min(prev + moveSpeed, gameBoardRef.current.clientWidth - 50));\n          setFacingLeft(false);\n        }\n\n        // Jump\n        if ((keysPressed.current[\"Space\"] || keysPressed.current[\"Spacebar\"]) && !isJumping) {\n          setIsJumping(true);\n          setTimeout(() => {\n            setIsJumping(false);\n          }, jumpDuration);\n        }\n\n        // Check for landing on red block only when not jumping\n        if (!isJumping) {\n          const duckCenter = leftPosition + 25;\n          const duckBlockIndex = Math.floor(duckCenter / blockWidth);\n          if (duckBlockIndex >= 0 && duckBlockIndex < totalBlocks && blocks[duckBlockIndex].type === \"red\" && !answeredBlocks.has(duckBlockIndex)) {\n            triggerMCQ(duckBlockIndex);\n          }\n        }\n      }\n    }, 20);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n      clearInterval(gameLoop);\n    };\n  }, [isJumping, blocks, isPaused, answeredBlocks, leftPosition]); // Added leftPosition to dependencies\n\n  const triggerMCQ = blockIndex => {\n    const randomIndex = Math.floor(Math.random() * questions.length);\n    setCurrentQuestion(questions[randomIndex]);\n    setShowMCQ(true);\n    setIsPaused(true);\n    setAnsweredBlocks(new Set([...answeredBlocks, blockIndex]));\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n      setIsPaused(false); // Resume movement immediately\n    } else {\n      setLives(prevLives => {\n        const newLives = prevLives - 1;\n        if (newLives <= 0) {\n          onGameOver(); // Call the game over function\n          return 0;\n        }\n        return newLives;\n      });\n      resetDuckling();\n    }\n    setShowMCQ(false);\n  };\n  const resetDuckling = () => {\n    setLeftPosition(50);\n    setIsPaused(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: `${isJumping ? \"jumping\" : \"\"} ${facingLeft ? \"facing-left\" : \"\"}`,\n      style: {\n        left: `${leftPosition}px`,\n        transform: isJumping ? \"translateY(-150px)\" : \"translateY(0)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"ELL/IqN1dgL2ajF8XNG/gwL4GTQ=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","onGameOver","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","facingLeft","setFacingLeft","isPaused","setIsPaused","forwardSpeed","moveSpeed","jumpDuration","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","keysPressed","blockWidth","platformY","totalBlocks","blocks","Array","from","length","map","_","index","type","includes","x","y","width","height","handleKeyDown","e","current","code","handleKeyUp","window","addEventListener","gameLoop","setInterval","prev","newPos","maxLeft","clientWidth","Math","min","max","setTimeout","duckCenter","duckBlockIndex","floor","has","triggerMCQ","removeEventListener","clearInterval","blockIndex","randomIndex","random","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","newLives","resetDuckling","className","ref","children","block","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\"\r\nimport \"./GameBoard.css\"\r\nimport Duckling from \"./Duckling\"\r\nimport MCQModal from \"./MCQModal\"\r\nimport { questions } from \"../data/questions\"\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n  onGameOver, // Add this prop to handle game over\r\n}) => {\r\n  const gameBoardRef = useRef(null)\r\n\r\n  // Duckling position states\r\n  const [leftPosition, setLeftPosition] = useState(50)\r\n  const [isJumping, setIsJumping] = useState(false)\r\n  const [facingLeft, setFacingLeft] = useState(false)\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const forwardSpeed = 2\r\n  const moveSpeed = 5\r\n  const jumpDuration = 600\r\n\r\n  // MCQ Modal states\r\n  const [showMCQ, setShowMCQ] = useState(false)\r\n  const [currentQuestion, setCurrentQuestion] = useState(null)\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set())\r\n\r\n  // Key press state\r\n  const keysPressed = useRef({})\r\n\r\n  // Define block properties\r\n  const blockWidth = 80\r\n  const platformY = 50\r\n\r\n  // Total blocks and block positions\r\n  const totalBlocks = 20\r\n  const blocks = Array.from({ length: totalBlocks }).map((_, index) => ({\r\n    type: [4, 9, 14, 19].includes(index) ? \"red\" : \"blue\",\r\n    x: index * blockWidth,\r\n    y: 0,\r\n    width: blockWidth,\r\n    height: 50,\r\n  }))\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      keysPressed.current[e.code] = true\r\n    }\r\n\r\n    const handleKeyUp = (e) => {\r\n      keysPressed.current[e.code] = false\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown)\r\n    window.addEventListener(\"keyup\", handleKeyUp)\r\n\r\n    const gameLoop = setInterval(() => {\r\n      if (!isPaused) {\r\n        // Continuous Forward Movement\r\n        setLeftPosition((prev) => {\r\n          const newPos = prev + forwardSpeed\r\n          const maxLeft = gameBoardRef.current.clientWidth - 50\r\n          return Math.min(newPos, maxLeft)\r\n        })\r\n\r\n        // Optional: Handle Left and Right Movements if desired\r\n        if (keysPressed.current[\"ArrowLeft\"] || keysPressed.current[\"KeyA\"]) {\r\n          setLeftPosition((prev) => Math.max(prev - moveSpeed, 0))\r\n          setFacingLeft(true)\r\n        }\r\n\r\n        if (keysPressed.current[\"ArrowRight\"] || keysPressed.current[\"KeyD\"]) {\r\n          setLeftPosition((prev) => Math.min(prev + moveSpeed, gameBoardRef.current.clientWidth - 50))\r\n          setFacingLeft(false)\r\n        }\r\n\r\n        // Jump\r\n        if ((keysPressed.current[\"Space\"] || keysPressed.current[\"Spacebar\"]) && !isJumping) {\r\n          setIsJumping(true)\r\n          setTimeout(() => {\r\n            setIsJumping(false)\r\n          }, jumpDuration)\r\n        }\r\n\r\n        // Check for landing on red block only when not jumping\r\n        if (!isJumping) {\r\n          const duckCenter = leftPosition + 25\r\n          const duckBlockIndex = Math.floor(duckCenter / blockWidth)\r\n          if (\r\n            duckBlockIndex >= 0 &&\r\n            duckBlockIndex < totalBlocks &&\r\n            blocks[duckBlockIndex].type === \"red\" &&\r\n            !answeredBlocks.has(duckBlockIndex)\r\n          ) {\r\n            triggerMCQ(duckBlockIndex)\r\n          }\r\n        }\r\n      }\r\n    }, 20)\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown)\r\n      window.removeEventListener(\"keyup\", handleKeyUp)\r\n      clearInterval(gameLoop)\r\n    }\r\n  }, [isJumping, blocks, isPaused, answeredBlocks, leftPosition]) // Added leftPosition to dependencies\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    const randomIndex = Math.floor(Math.random() * questions.length)\r\n    setCurrentQuestion(questions[randomIndex])\r\n    setShowMCQ(true)\r\n    setIsPaused(true)\r\n    setAnsweredBlocks(new Set([...answeredBlocks, blockIndex]))\r\n  }\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1)\r\n      setScore((prevScore) => prevScore + 10)\r\n      setIsPaused(false) // Resume movement immediately\r\n    } else {\r\n      setLives((prevLives) => {\r\n        const newLives = prevLives - 1\r\n        if (newLives <= 0) {\r\n          onGameOver() // Call the game over function\r\n          return 0\r\n        }\r\n        return newLives\r\n      })\r\n      resetDuckling()\r\n    }\r\n    setShowMCQ(false)\r\n  }\r\n\r\n  const resetDuckling = () => {\r\n    setLeftPosition(50)\r\n    setIsPaused(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x}px`,\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={`${isJumping ? \"jumping\" : \"\"} ${facingLeft ? \"facing-left\" : \"\"}`}\r\n        style={{\r\n          left: `${leftPosition}px`,\r\n          transform: isJumping ? \"translateY(-150px)\" : \"translateY(0)\",\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameBoard\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}