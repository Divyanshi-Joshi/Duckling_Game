{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [cameraX, setCameraX] = useState(0);\n\n  // Initial block generation with increased red block frequency\n  const [blocks, setBlocks] = useState(() => {\n    const initialBlocks = [];\n    for (let i = 0; i < 15; i++) {\n      initialBlocks.push({\n        type: Math.random() < 0.3 ? 'red' : 'blue',\n        // 30% chance to be red\n        x: i * 100,\n        width: 100,\n        height: 50\n      });\n    }\n    return initialBlocks;\n  });\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 100;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prev => {\n          const potentialNewPos = prev + forwardSpeed;\n          const gameWidth = gameBoardRef.current.clientWidth;\n\n          // Update cameraX if the duck reaches the center\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\n            setCameraX(potentialNewPos - gameWidth / 2);\n\n            // Dynamically add new blocks if nearing the end\n            const lastBlock = blocks[blocks.length - 1];\n            if (lastBlock.x - cameraX < gameWidth) {\n              setBlocks(prevBlocks => {\n                var _prevBlocks;\n                const prevBlockType = ((_prevBlocks = prevBlocks[prevBlocks.length - 1]) === null || _prevBlocks === void 0 ? void 0 : _prevBlocks.type) || 'blue';\n                const isPrevRed = prevBlockType === 'red';\n                const newBlockType = !isPrevRed && Math.random() < 0.3 ? 'red' : 'blue';\n                return [...prevBlocks, {\n                  type: newBlockType,\n                  // Assign type based on the logic\n                  x: lastBlock.x + blockWidth,\n                  width: blockWidth,\n                  height: 50\n                }];\n              });\n            }\n          }\n          const duckLeft = potentialNewPos;\n          const duckRight = duckLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling overlaps with this block\n            const isOverlapping = duckRight > blockLeft && duckLeft < blockRight;\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n              triggerMCQ(i);\n              return prev; // Prevent moving into the red block\n            }\n          }\n\n          // Ensure the duck doesn't move beyond the game world\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setCameraX(0);\n    setIsPaused(false);\n    setIsJumping(false);\n    setBlocks(() => {\n      const initialBlocks = [];\n      for (let i = 0; i < 15; i++) {\n        initialBlocks.push({\n          type: Math.random() < 0.3 ? 'red' : 'blue',\n          // Reset with increased red block frequency\n          x: i * 100,\n          width: 100,\n          height: 50\n        });\n      }\n      return initialBlocks;\n    });\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setLives(prevLives => prevLives - 1);\n      if (lives - 1 <= 0) {\n        // Game over logic here\n        alert('Game Over!');\n        // Optionally, reset the game or navigate to Game Over screen\n        resetGame();\n      } else {\n        resetGame(); // Reset the game state including answeredBlocks\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x - cameraX}px`,\n          // Adjust position based on cameraX\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition - cameraX}px`,\n        // Adjust position based on cameraX\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"8V/qDHyWVa8UWFX8TZFYyr3/BfM=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","cameraX","setCameraX","blocks","setBlocks","initialBlocks","i","push","type","Math","random","x","width","height","forwardSpeed","jumpHeight","jumpDuration","blockWidth","ducklingWidth","ducklingHeight","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","gameLoop","setInterval","prev","potentialNewPos","gameWidth","current","clientWidth","lastBlock","length","prevBlocks","_prevBlocks","prevBlockType","isPrevRed","newBlockType","duckLeft","duckRight","block","blockLeft","blockRight","isOverlapping","has","triggerMCQ","maxLeft","min","clearInterval","setTimeout","blockIndex","floor","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","alert","className","ref","children","map","index","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [cameraX, setCameraX] = useState(0);\r\n\r\n  // Initial block generation with increased red block frequency\r\n  const [blocks, setBlocks] = useState(() => {\r\n    const initialBlocks = [];\r\n    for (let i = 0; i < 15; i++) {\r\n      initialBlocks.push({\r\n        type: Math.random() < 0.3 ? 'red' : 'blue', // 30% chance to be red\r\n        x: i * 100,\r\n        width: 100,\r\n        height: 50,\r\n      });\r\n    }\r\n    return initialBlocks;\r\n  });\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 100;\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prev) => {\r\n          const potentialNewPos = prev + forwardSpeed;\r\n          const gameWidth = gameBoardRef.current.clientWidth;\r\n\r\n          // Update cameraX if the duck reaches the center\r\n          if (potentialNewPos - cameraX >= gameWidth / 2) {\r\n            setCameraX(potentialNewPos - gameWidth / 2);\r\n\r\n            // Dynamically add new blocks if nearing the end\r\n            const lastBlock = blocks[blocks.length - 1];\r\n            if (lastBlock.x - cameraX < gameWidth) {\r\n              setBlocks((prevBlocks) => {\r\n                const prevBlockType = prevBlocks[prevBlocks.length - 1]?.type || 'blue';\r\n                const isPrevRed = prevBlockType === 'red';\r\n                const newBlockType = !isPrevRed && Math.random() < 0.3 ? 'red' : 'blue';\r\n\r\n                return [\r\n                  ...prevBlocks,\r\n                  {\r\n                    type: newBlockType, // Assign type based on the logic\r\n                    x: lastBlock.x + blockWidth,\r\n                    width: blockWidth,\r\n                    height: 50,\r\n                  },\r\n                ];\r\n              });\r\n            }\r\n          }\r\n\r\n          const duckLeft = potentialNewPos;\r\n          const duckRight = duckLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling overlaps with this block\r\n            const isOverlapping =\r\n              duckRight > blockLeft && duckLeft < blockRight;\r\n\r\n            if (\r\n              isOverlapping &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i)\r\n            ) {\r\n              triggerMCQ(i);\r\n              return prev; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Ensure the duck doesn't move beyond the game world\r\n          const maxLeft = blocks[blocks.length - 1].x + blockWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth, cameraX]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setCameraX(0);\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n    setBlocks(() => {\r\n      const initialBlocks = [];\r\n      for (let i = 0; i < 15; i++) {\r\n        initialBlocks.push({\r\n          type: Math.random() < 0.3 ? 'red' : 'blue', // Reset with increased red block frequency\r\n          x: i * 100,\r\n          width: 100,\r\n          height: 50,\r\n        });\r\n      }\r\n      return initialBlocks;\r\n    });\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setLives((prevLives) => prevLives - 1);\r\n      if (lives - 1 <= 0) {\r\n        // Game over logic here\r\n        alert('Game Over!');\r\n        // Optionally, reset the game or navigate to Game Over screen\r\n        resetGame();\r\n      } else {\r\n        resetGame(); // Reset the game state including answeredBlocks\r\n      }\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x - cameraX}px`, // Adjust position based on cameraX\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition - cameraX}px`, // Adjust position based on cameraX\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}