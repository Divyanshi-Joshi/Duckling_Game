{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [platformOffset, setPlatformOffset] = useState(0); // Platform movement offset\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const [blocks, setBlocks] = useState([]); // Dynamic blocks state\n\n  const forwardSpeed = 1; // Reduced platform movement speed (pixels per frame)\n  const jumpHeight = 150; // Duckling jump height\n  const jumpDuration = 600; // Duckling jump duration\n  const blockWidth = 240; // Quadrupled width of each block\n  const blockHeight = 60; // Height of each block\n  const totalBlocks = 100; // Increased total number of blocks for a longer platform\n\n  const ducklingWidth = 50; // Duckling width\n  const ducklingHeight = 50; // Duckling height\n\n  // Initialize the platform with all blue blocks\n  useEffect(() => {\n    const initialBlocks = Array.from({\n      length: totalBlocks\n    }).map((_, index) => ({\n      type: 'blue',\n      // All blocks start as blue\n      x: index * blockWidth,\n      // Initial x-position of the block\n      width: blockWidth,\n      height: blockHeight\n    }));\n    setBlocks(initialBlocks);\n  }, []);\n\n  // Introduce red blocks dynamically after some time\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const updatedBlocks = blocks.map((block, index) => {\n        if (index > 10 && Math.random() < 0.1) {\n          // 10% chance to turn a block red after the first 10 blocks\n          return {\n            ...block,\n            type: 'red'\n          };\n        }\n        return block;\n      });\n      setBlocks(updatedBlocks);\n    }, 5000); // Introduce red blocks after 5 seconds\n\n    return () => clearTimeout(timer);\n  }, [blocks]);\n\n  // Game loop using requestAnimationFrame\n  const gameLoopRef = useRef();\n  const animate = () => {\n    if (!isPaused && blocks.length > 0) {\n      // Ensure blocks are initialized\n      // Move the platform towards the duckling\n      setPlatformOffset(prevOffset => prevOffset - forwardSpeed);\n\n      // Collision detection\n      const ducklingLeft = gameBoardRef.current.clientWidth / 2 - ducklingWidth / 2; // Duckling's fixed position\n      const ducklingRight = ducklingLeft + ducklingWidth;\n      for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n        const blockLeft = block.x + platformOffset; // Adjusted block position\n        const blockRight = blockLeft + block.width;\n\n        // Check if duckling overlaps with this block\n        const isOverlapping = ducklingRight > blockLeft && ducklingLeft < blockRight;\n        if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n          // Pause the game immediately\n          setIsPaused(true);\n          triggerMCQ(i);\n          return; // Exit the loop to prevent further updates\n        }\n      }\n\n      // Check if the platform has ended\n      const platformEnd = blocks[blocks.length - 1].x + platformOffset + blockWidth;\n      if (platformEnd < gameBoardRef.current.clientWidth / 2) {\n        // Platform has ended\n        setIsPaused(true);\n        alert('Congratulations! You reached the end of the platform!');\n        resetGame();\n      }\n    }\n\n    // Request the next frame\n    gameLoopRef.current = requestAnimationFrame(animate);\n  };\n  useEffect(() => {\n    // Start the game loop only if blocks are initialized\n    if (blocks.length > 0) {\n      gameLoopRef.current = requestAnimationFrame(animate);\n    }\n    return () => cancelAnimationFrame(gameLoopRef.current);\n  }, [isPaused, blocks, answeredBlocks]);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const resetGame = () => {\n    setPlatformOffset(0); // Reset platform position\n    setAnsweredBlocks(new Set());\n    setIsPaused(false);\n    setIsJumping(false);\n\n    // Reset blocks to all blue\n    const initialBlocks = Array.from({\n      length: totalBlocks\n    }).map((_, index) => ({\n      type: 'blue',\n      x: index * blockWidth,\n      width: blockWidth,\n      height: blockHeight\n    }));\n    setBlocks(initialBlocks);\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setLives(prevLives => prevLives - 1);\n      if (lives - 1 <= 0) {\n        // Game over logic here\n        alert('Game Over!');\n        // Optionally, reset the game or navigate to Game Over screen\n      } else {\n        resetGame(); // Reset the game state including answeredBlocks\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      style: {\n        transform: `translateX(${platformOffset}px)` // Move the platform\n      },\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `calc(50% - ${ducklingWidth / 2}px)`,\n        // Duckling stays in the center\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"GXD56SELEq/ntzEEaToxOpXadqo=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","platformOffset","setPlatformOffset","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","blocks","setBlocks","forwardSpeed","jumpHeight","jumpDuration","blockWidth","blockHeight","totalBlocks","ducklingWidth","ducklingHeight","initialBlocks","Array","from","length","map","_","index","type","x","width","height","timer","setTimeout","updatedBlocks","block","Math","random","clearTimeout","gameLoopRef","animate","prevOffset","ducklingLeft","current","clientWidth","ducklingRight","i","blockLeft","blockRight","isOverlapping","has","triggerMCQ","platformEnd","alert","resetGame","requestAnimationFrame","cancelAnimationFrame","handleKeyDown","e","code","jump","window","addEventListener","removeEventListener","blockIndex","floor","prev","add","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","className","ref","children","style","transform","left","fileName","_jsxFileName","lineNumber","columnNumber","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [platformOffset, setPlatformOffset] = useState(0); // Platform movement offset\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n  const [blocks, setBlocks] = useState([]); // Dynamic blocks state\r\n\r\n  const forwardSpeed = 1; // Reduced platform movement speed (pixels per frame)\r\n  const jumpHeight = 150; // Duckling jump height\r\n  const jumpDuration = 600; // Duckling jump duration\r\n  const blockWidth = 240; // Quadrupled width of each block\r\n  const blockHeight = 60; // Height of each block\r\n  const totalBlocks = 100; // Increased total number of blocks for a longer platform\r\n\r\n  const ducklingWidth = 50; // Duckling width\r\n  const ducklingHeight = 50; // Duckling height\r\n\r\n  // Initialize the platform with all blue blocks\r\n  useEffect(() => {\r\n    const initialBlocks = Array.from({ length: totalBlocks }).map((_, index) => ({\r\n      type: 'blue', // All blocks start as blue\r\n      x: index * blockWidth, // Initial x-position of the block\r\n      width: blockWidth,\r\n      height: blockHeight,\r\n    }));\r\n    setBlocks(initialBlocks);\r\n  }, []);\r\n\r\n  // Introduce red blocks dynamically after some time\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      const updatedBlocks = blocks.map((block, index) => {\r\n        if (index > 10 && Math.random() < 0.1) { // 10% chance to turn a block red after the first 10 blocks\r\n          return { ...block, type: 'red' };\r\n        }\r\n        return block;\r\n      });\r\n      setBlocks(updatedBlocks);\r\n    }, 5000); // Introduce red blocks after 5 seconds\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [blocks]);\r\n\r\n  // Game loop using requestAnimationFrame\r\n  const gameLoopRef = useRef();\r\n\r\n  const animate = () => {\r\n    if (!isPaused && blocks.length > 0) { // Ensure blocks are initialized\r\n      // Move the platform towards the duckling\r\n      setPlatformOffset((prevOffset) => prevOffset - forwardSpeed);\r\n\r\n      // Collision detection\r\n      const ducklingLeft = gameBoardRef.current.clientWidth / 2 - ducklingWidth / 2; // Duckling's fixed position\r\n      const ducklingRight = ducklingLeft + ducklingWidth;\r\n\r\n      for (let i = 0; i < blocks.length; i++) {\r\n        const block = blocks[i];\r\n        const blockLeft = block.x + platformOffset; // Adjusted block position\r\n        const blockRight = blockLeft + block.width;\r\n\r\n        // Check if duckling overlaps with this block\r\n        const isOverlapping =\r\n          ducklingRight > blockLeft && ducklingLeft < blockRight;\r\n\r\n        if (\r\n          isOverlapping &&\r\n          block.type === 'red' &&\r\n          !answeredBlocks.has(i)\r\n        ) {\r\n          // Pause the game immediately\r\n          setIsPaused(true);\r\n          triggerMCQ(i);\r\n          return; // Exit the loop to prevent further updates\r\n        }\r\n      }\r\n\r\n      // Check if the platform has ended\r\n      const platformEnd = blocks[blocks.length - 1].x + platformOffset + blockWidth;\r\n      if (platformEnd < gameBoardRef.current.clientWidth / 2) {\r\n        // Platform has ended\r\n        setIsPaused(true);\r\n        alert('Congratulations! You reached the end of the platform!');\r\n        resetGame();\r\n      }\r\n    }\r\n\r\n    // Request the next frame\r\n    gameLoopRef.current = requestAnimationFrame(animate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Start the game loop only if blocks are initialized\r\n    if (blocks.length > 0) {\r\n      gameLoopRef.current = requestAnimationFrame(animate);\r\n    }\r\n    return () => cancelAnimationFrame(gameLoopRef.current);\r\n  }, [isPaused, blocks, answeredBlocks]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setPlatformOffset(0); // Reset platform position\r\n    setAnsweredBlocks(new Set());\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n\r\n    // Reset blocks to all blue\r\n    const initialBlocks = Array.from({ length: totalBlocks }).map((_, index) => ({\r\n      type: 'blue',\r\n      x: index * blockWidth,\r\n      width: blockWidth,\r\n      height: blockHeight,\r\n    }));\r\n    setBlocks(initialBlocks);\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setLives((prevLives) => prevLives - 1);\r\n      if (lives - 1 <= 0) {\r\n        // Game over logic here\r\n        alert('Game Over!');\r\n        // Optionally, reset the game or navigate to Game Over screen\r\n      } else {\r\n        resetGame(); // Reset the game state including answeredBlocks\r\n      }\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false); // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div\r\n        className=\"platform\"\r\n        style={{\r\n          transform: `translateX(${platformOffset}px)`, // Move the platform\r\n        }}\r\n      >\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `calc(50% - ${ducklingWidth / 2}px)`, // Duckling stays in the center\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}