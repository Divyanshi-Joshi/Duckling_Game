{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\duckling-game\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\n// src/components/GameBoard.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GameBoard.css';\nimport Duckling from './Duckling';\nimport MCQModal from './MCQModal';\nimport { questions } from '../data/questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  setScore,\n  setLives,\n  setCoins,\n  score,\n  lives,\n  coins\n}) => {\n  _s();\n  const gameBoardRef = useRef(null);\n  const [leftPosition, setLeftPosition] = useState(50);\n  const [isJumping, setIsJumping] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [showMCQ, setShowMCQ] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\n  const forwardSpeed = 2; // pixels per interval\n  const jumpHeight = 150;\n  const jumpDuration = 600;\n  const blockWidth = 80;\n  const totalBlocks = 20;\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\n\n  const blocks = Array.from({\n    length: totalBlocks\n  }).map((_, index) => ({\n    type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\n    x: index * blockWidth,\n    width: blockWidth,\n    height: 50\n  }));\n  ffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Space' && !isJumping && !isPaused) {\n        jump();\n      }\n      useE;\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isJumping, isPaused]);\n  useEffect(() => {\n    if (!isPaused) {\n      const gameLoop = setInterval(() => {\n        setLeftPosition(prev => {\n          const potentialNewPos = prev + forwardSpeed;\n          const ducklingLeft = potentialNewPos;\n          const ducklingRight = ducklingLeft + ducklingWidth;\n\n          // Iterate through all blocks to check for collision\n          for (let i = 0; i < blocks.length; i++) {\n            const block = blocks[i];\n            const blockLeft = block.x;\n            const blockRight = block.x + block.width;\n\n            // Check if duckling overlaps with this block\n            const isOverlapping = ducklingRight > blockLeft && ducklingLeft < blockRight;\n            if (isOverlapping && block.type === 'red' && !answeredBlocks.has(i)) {\n              triggerMCQ(i);\n              return prev; // Prevent moving into the red block\n            }\n          }\n\n          // Ensure the duckling doesn't move beyond the game board\n          const maxLeft = gameBoardRef.current.clientWidth - ducklingWidth;\n          return Math.min(potentialNewPos, maxLeft);\n        });\n      }, 20);\n      return () => clearInterval(gameLoop);\n    }\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth]);\n  const jump = () => {\n    if (!isJumping) {\n      setIsJumping(true);\n      setTimeout(() => setIsJumping(false), jumpDuration);\n    }\n  };\n  const triggerMCQ = blockIndex => {\n    setIsPaused(true);\n    setShowMCQ(true);\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\n    setAnsweredBlocks(prev => new Set(prev).add(blockIndex));\n  };\n  const resetGame = () => {\n    setLeftPosition(50);\n    setAnsweredBlocks(new Set());\n    setIsPaused(false);\n    setIsJumping(false);\n  };\n  const handleAnswer = isCorrect => {\n    if (isCorrect) {\n      setCoins(prevCoins => prevCoins + 1);\n      setScore(prevScore => prevScore + 10);\n    } else {\n      setLives(prevLives => prevLives - 1);\n      if (lives - 1 <= 0) {\n        // Game over logic here\n        alert('Game Over!');\n        // Optionally, reset the game or navigate to Game Over screen\n      } else {\n        resetGame(); // Reset the game state including answeredBlocks\n      }\n    }\n    setIsPaused(false); // Resume the game\n    setShowMCQ(false); // Hide the MCQ modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    ref: gameBoardRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platform\",\n      children: blocks.map((block, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `block ${block.type}`,\n        style: {\n          left: `${block.x}px`,\n          width: `${block.width}px`,\n          height: `${block.height}px`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Duckling, {\n      className: isJumping ? 'jumping' : '',\n      style: {\n        left: `${leftPosition}px`,\n        transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\n        transition: `transform ${jumpDuration}ms`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), showMCQ && currentQuestion && /*#__PURE__*/_jsxDEV(MCQModal, {\n      questionData: currentQuestion,\n      onAnswer: handleAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"5xolIdGZyoc/B2nYCvVdAwOAgcs=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Duckling","MCQModal","questions","jsxDEV","_jsxDEV","GameBoard","setScore","setLives","setCoins","score","lives","coins","_s","gameBoardRef","leftPosition","setLeftPosition","isJumping","setIsJumping","isPaused","setIsPaused","showMCQ","setShowMCQ","currentQuestion","setCurrentQuestion","answeredBlocks","setAnsweredBlocks","Set","forwardSpeed","jumpHeight","jumpDuration","blockWidth","totalBlocks","ducklingWidth","ducklingHeight","blocks","Array","from","length","map","_","index","type","includes","x","width","height","ffect","handleKeyDown","e","code","jump","useE","window","addEventListener","removeEventListener","gameLoop","setInterval","prev","potentialNewPos","ducklingLeft","ducklingRight","i","block","blockLeft","blockRight","isOverlapping","has","triggerMCQ","maxLeft","current","clientWidth","Math","min","clearInterval","setTimeout","blockIndex","floor","random","add","resetGame","handleAnswer","isCorrect","prevCoins","prevScore","prevLives","alert","className","ref","children","style","left","fileName","_jsxFileName","lineNumber","columnNumber","transform","transition","questionData","onAnswer","_c","$RefreshReg$"],"sources":["E:/project/duckling-game/src/components/GameBoard.js"],"sourcesContent":["// src/components/GameBoard.js\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './GameBoard.css';\r\nimport Duckling from './Duckling';\r\nimport MCQModal from './MCQModal';\r\nimport { questions } from '../data/questions';\r\n\r\nconst GameBoard = ({\r\n  setScore,\r\n  setLives,\r\n  setCoins,\r\n  score,\r\n  lives,\r\n  coins,\r\n}) => {\r\n  const gameBoardRef = useRef(null);\r\n  const [leftPosition, setLeftPosition] = useState(50);\r\n  const [isJumping, setIsJumping] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [showMCQ, setShowMCQ] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [answeredBlocks, setAnsweredBlocks] = useState(new Set());\r\n\r\n  const forwardSpeed = 2; // pixels per interval\r\n  const jumpHeight = 150;\r\n  const jumpDuration = 600;\r\n  const blockWidth = 80;\r\n  const totalBlocks = 20;\r\n\r\n  const ducklingWidth = 50; // Adjust based on Duckling component's actual width\r\n  const ducklingHeight = 50; // Adjust based on Duckling component's actual height\r\n\r\n  const blocks = Array.from({ length: totalBlocks }).map((_, index) => ({\r\n    type: [4, 9, 14, 19].includes(index) ? 'red' : 'blue',\r\n    x: index * blockWidth,\r\n    width: blockWidth,\r\n    height: 50,\r\n  }));\r\n\r\n  ffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.code === 'Space' && !isJumping && !isPaused) {\r\n        jump();\r\n      }useE\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [isJumping, isPaused]);\r\n\r\n  useEffect(() => {\r\n    if (!isPaused) {\r\n      const gameLoop = setInterval(() => {\r\n        setLeftPosition((prev) => {\r\n          const potentialNewPos = prev + forwardSpeed;\r\n          const ducklingLeft = potentialNewPos;\r\n          const ducklingRight = ducklingLeft + ducklingWidth;\r\n\r\n          // Iterate through all blocks to check for collision\r\n          for (let i = 0; i < blocks.length; i++) {\r\n            const block = blocks[i];\r\n            const blockLeft = block.x;\r\n            const blockRight = block.x + block.width;\r\n\r\n            // Check if duckling overlaps with this block\r\n            const isOverlapping =\r\n              ducklingRight > blockLeft && ducklingLeft < blockRight;\r\n\r\n            if (\r\n              isOverlapping &&\r\n              block.type === 'red' &&\r\n              !answeredBlocks.has(i)\r\n            ) {\r\n              triggerMCQ(i);\r\n              return prev; // Prevent moving into the red block\r\n            }\r\n          }\r\n\r\n          // Ensure the duckling doesn't move beyond the game board\r\n          const maxLeft = gameBoardRef.current.clientWidth - ducklingWidth;\r\n          return Math.min(potentialNewPos, maxLeft);\r\n        });\r\n      }, 20);\r\n\r\n      return () => clearInterval(gameLoop);\r\n    }\r\n  }, [isPaused, blocks, answeredBlocks, ducklingWidth]);\r\n\r\n  const jump = () => {\r\n    if (!isJumping) {\r\n      setIsJumping(true);\r\n      setTimeout(() => setIsJumping(false), jumpDuration);\r\n    }\r\n  };\r\n\r\n  const triggerMCQ = (blockIndex) => {\r\n    setIsPaused(true);\r\n    setShowMCQ(true);\r\n    setCurrentQuestion(questions[Math.floor(Math.random() * questions.length)]);\r\n    setAnsweredBlocks((prev) => new Set(prev).add(blockIndex));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setLeftPosition(50);\r\n    setAnsweredBlocks(new Set());\r\n    setIsPaused(false);\r\n    setIsJumping(false);\r\n  };\r\n\r\n  const handleAnswer = (isCorrect) => {\r\n    if (isCorrect) {\r\n      setCoins((prevCoins) => prevCoins + 1);\r\n      setScore((prevScore) => prevScore + 10);\r\n    } else {\r\n      setLives((prevLives) => prevLives - 1);\r\n      if (lives - 1 <= 0) {\r\n        // Game over logic here\r\n        alert('Game Over!');\r\n        // Optionally, reset the game or navigate to Game Over screen\r\n      } else {\r\n        resetGame(); // Reset the game state including answeredBlocks\r\n      }\r\n    }\r\n    setIsPaused(false); // Resume the game\r\n    setShowMCQ(false);  // Hide the MCQ modal\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\" ref={gameBoardRef}>\r\n      <div className=\"platform\">\r\n        {blocks.map((block, index) => (\r\n          <div\r\n            key={index}\r\n            className={`block ${block.type}`}\r\n            style={{\r\n              left: `${block.x}px`,\r\n              width: `${block.width}px`,\r\n              height: `${block.height}px`,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Duckling\r\n        className={isJumping ? 'jumping' : ''}\r\n        style={{\r\n          left: `${leftPosition}px`,\r\n          transform: isJumping ? `translateY(-${jumpHeight}px)` : 'translateY(0)',\r\n          transition: `transform ${jumpDuration}ms`,\r\n        }}\r\n      />\r\n      {showMCQ && currentQuestion && (\r\n        <MCQModal questionData={currentQuestion} onAnswer={handleAnswer} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}